
LCD Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001098  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001098  0000110c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000130a  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000028b  00000000  00000000  000025a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000461  00000000  00000000  00002831  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  00002c94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000845  00000000  00000000  000031ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003a34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 f6 02 	call	0x5ec	; 0x5ec <main>
      7a:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <pinChange>:
	pinChange(D3,1);
	else
	pinChange(D3,0);
	
	if(a & 16)
	pinChange(D4,1);
      82:	67 2b       	or	r22, r23
      84:	09 f0       	breq	.+2      	; 0x88 <pinChange+0x6>
      86:	9f c0       	rjmp	.+318    	; 0x1c6 <pinChange+0x144>
      88:	00 97       	sbiw	r24, 0x00	; 0
      8a:	11 f4       	brne	.+4      	; 0x90 <pinChange+0xe>
      8c:	d8 98       	cbi	0x1b, 0	; 27
	else
	pinChange(D4,0);
      8e:	08 95       	ret
      90:	81 30       	cpi	r24, 0x01	; 1
      92:	91 05       	cpc	r25, r1
      94:	11 f4       	brne	.+4      	; 0x9a <pinChange+0x18>
      96:	d9 98       	cbi	0x1b, 1	; 27
      98:	08 95       	ret

	if(a & 32)
      9a:	82 30       	cpi	r24, 0x02	; 2
      9c:	91 05       	cpc	r25, r1
	pinChange(D5,1);
      9e:	11 f4       	brne	.+4      	; 0xa4 <pinChange+0x22>
      a0:	da 98       	cbi	0x1b, 2	; 27
      a2:	08 95       	ret
      a4:	83 30       	cpi	r24, 0x03	; 3
      a6:	91 05       	cpc	r25, r1
      a8:	11 f4       	brne	.+4      	; 0xae <pinChange+0x2c>
      aa:	db 98       	cbi	0x1b, 3	; 27
	else
	pinChange(D5,0);
      ac:	08 95       	ret
      ae:	84 30       	cpi	r24, 0x04	; 4
      b0:	91 05       	cpc	r25, r1
      b2:	11 f4       	brne	.+4      	; 0xb8 <pinChange+0x36>
      b4:	dc 98       	cbi	0x1b, 4	; 27
      b6:	08 95       	ret
	
	if(a & 64)
      b8:	85 30       	cpi	r24, 0x05	; 5
      ba:	91 05       	cpc	r25, r1
	pinChange(D6,1);
      bc:	11 f4       	brne	.+4      	; 0xc2 <pinChange+0x40>
      be:	dd 98       	cbi	0x1b, 5	; 27
      c0:	08 95       	ret
      c2:	86 30       	cpi	r24, 0x06	; 6
      c4:	91 05       	cpc	r25, r1
      c6:	11 f4       	brne	.+4      	; 0xcc <pinChange+0x4a>
      c8:	de 98       	cbi	0x1b, 6	; 27
	else
	pinChange(D6,0);
      ca:	08 95       	ret
      cc:	87 30       	cpi	r24, 0x07	; 7
      ce:	91 05       	cpc	r25, r1
      d0:	11 f4       	brne	.+4      	; 0xd6 <pinChange+0x54>
      d2:	df 98       	cbi	0x1b, 7	; 27
      d4:	08 95       	ret
	
	if(a & 128)
      d6:	8a 30       	cpi	r24, 0x0A	; 10
      d8:	91 05       	cpc	r25, r1
	pinChange(D7,1);
      da:	11 f4       	brne	.+4      	; 0xe0 <pinChange+0x5e>
      dc:	c0 98       	cbi	0x18, 0	; 24
      de:	08 95       	ret
      e0:	8b 30       	cpi	r24, 0x0B	; 11
      e2:	91 05       	cpc	r25, r1
      e4:	11 f4       	brne	.+4      	; 0xea <pinChange+0x68>
      e6:	c1 98       	cbi	0x18, 1	; 24
	else
	pinChange(D7,0);
      e8:	08 95       	ret
      ea:	8c 30       	cpi	r24, 0x0C	; 12
      ec:	91 05       	cpc	r25, r1
      ee:	11 f4       	brne	.+4      	; 0xf4 <pinChange+0x72>
      f0:	c2 98       	cbi	0x18, 2	; 24
      f2:	08 95       	ret
}
      f4:	8d 30       	cpi	r24, 0x0D	; 13
      f6:	91 05       	cpc	r25, r1
		PORTB &= ~(1<<PB0);
		else if(a == eS_PORTB1)
		PORTB &= ~(1<<PB1);
		else if(a == eS_PORTB2)
		PORTB &= ~(1<<PB2);
		else if(a == eS_PORTB3)
      f8:	11 f4       	brne	.+4      	; 0xfe <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
      fa:	c3 98       	cbi	0x18, 3	; 24
      fc:	08 95       	ret
		else if(a == eS_PORTB4)
      fe:	8e 30       	cpi	r24, 0x0E	; 14
     100:	91 05       	cpc	r25, r1
     102:	11 f4       	brne	.+4      	; 0x108 <pinChange+0x86>
		PORTB &= ~(1<<PB4);
     104:	c4 98       	cbi	0x18, 4	; 24
     106:	08 95       	ret
		else if(a == eS_PORTB5)
     108:	8f 30       	cpi	r24, 0x0F	; 15
     10a:	91 05       	cpc	r25, r1
     10c:	11 f4       	brne	.+4      	; 0x112 <pinChange+0x90>
		PORTB &= ~(1<<PB5);
     10e:	c5 98       	cbi	0x18, 5	; 24
     110:	08 95       	ret
		else if(a == eS_PORTB6)
     112:	80 31       	cpi	r24, 0x10	; 16
     114:	91 05       	cpc	r25, r1
     116:	11 f4       	brne	.+4      	; 0x11c <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
     118:	c6 98       	cbi	0x18, 6	; 24
     11a:	08 95       	ret
		else if(a == eS_PORTB7)
     11c:	81 31       	cpi	r24, 0x11	; 17
     11e:	91 05       	cpc	r25, r1
     120:	11 f4       	brne	.+4      	; 0x126 <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
     122:	c7 98       	cbi	0x18, 7	; 24
     124:	08 95       	ret
		else if(a == eS_PORTC0)
     126:	84 31       	cpi	r24, 0x14	; 20
     128:	91 05       	cpc	r25, r1
     12a:	11 f4       	brne	.+4      	; 0x130 <pinChange+0xae>
		PORTC &= ~(1<<PC0);
     12c:	a8 98       	cbi	0x15, 0	; 21
     12e:	08 95       	ret
		else if(a == eS_PORTC1)
     130:	85 31       	cpi	r24, 0x15	; 21
     132:	91 05       	cpc	r25, r1
     134:	11 f4       	brne	.+4      	; 0x13a <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
     136:	a9 98       	cbi	0x15, 1	; 21
     138:	08 95       	ret
		else if(a == eS_PORTC2)
     13a:	86 31       	cpi	r24, 0x16	; 22
     13c:	91 05       	cpc	r25, r1
     13e:	11 f4       	brne	.+4      	; 0x144 <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
     140:	aa 98       	cbi	0x15, 2	; 21
     142:	08 95       	ret
		else if(a == eS_PORTC3)
     144:	87 31       	cpi	r24, 0x17	; 23
     146:	91 05       	cpc	r25, r1
     148:	11 f4       	brne	.+4      	; 0x14e <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
     14a:	ab 98       	cbi	0x15, 3	; 21
     14c:	08 95       	ret
		else if(a == eS_PORTC4)
     14e:	88 31       	cpi	r24, 0x18	; 24
     150:	91 05       	cpc	r25, r1
     152:	11 f4       	brne	.+4      	; 0x158 <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
     154:	ac 98       	cbi	0x15, 4	; 21
     156:	08 95       	ret
		else if(a == eS_PORTC5)
     158:	89 31       	cpi	r24, 0x19	; 25
     15a:	91 05       	cpc	r25, r1
     15c:	11 f4       	brne	.+4      	; 0x162 <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
     15e:	ad 98       	cbi	0x15, 5	; 21
     160:	08 95       	ret
		else if(a == eS_PORTC6)
     162:	8a 31       	cpi	r24, 0x1A	; 26
     164:	91 05       	cpc	r25, r1
     166:	11 f4       	brne	.+4      	; 0x16c <pinChange+0xea>
		PORTC &= ~(1<<PC6);
     168:	ae 98       	cbi	0x15, 6	; 21
     16a:	08 95       	ret
		else if(a == eS_PORTC7)
     16c:	8b 31       	cpi	r24, 0x1B	; 27
     16e:	91 05       	cpc	r25, r1
     170:	11 f4       	brne	.+4      	; 0x176 <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
     172:	af 98       	cbi	0x15, 7	; 21
     174:	08 95       	ret
		else if(a == eS_PORTD0)
     176:	8e 31       	cpi	r24, 0x1E	; 30
     178:	91 05       	cpc	r25, r1
     17a:	11 f4       	brne	.+4      	; 0x180 <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
     17c:	90 98       	cbi	0x12, 0	; 18
     17e:	08 95       	ret
		else if(a == eS_PORTD1)
     180:	8f 31       	cpi	r24, 0x1F	; 31
     182:	91 05       	cpc	r25, r1
     184:	11 f4       	brne	.+4      	; 0x18a <pinChange+0x108>
		PORTD &= ~(1<<PD1);
     186:	91 98       	cbi	0x12, 1	; 18
     188:	08 95       	ret
		else if(a == eS_PORTD2)
     18a:	80 32       	cpi	r24, 0x20	; 32
     18c:	91 05       	cpc	r25, r1
     18e:	11 f4       	brne	.+4      	; 0x194 <pinChange+0x112>
		PORTD &= ~(1<<PD2);
     190:	92 98       	cbi	0x12, 2	; 18
     192:	08 95       	ret
		else if(a == eS_PORTD3)
     194:	81 32       	cpi	r24, 0x21	; 33
     196:	91 05       	cpc	r25, r1
     198:	11 f4       	brne	.+4      	; 0x19e <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
     19a:	93 98       	cbi	0x12, 3	; 18
     19c:	08 95       	ret
		else if(a == eS_PORTD4)
     19e:	82 32       	cpi	r24, 0x22	; 34
     1a0:	91 05       	cpc	r25, r1
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <pinChange+0x126>
		PORTD &= ~(1<<PD4);
     1a4:	94 98       	cbi	0x12, 4	; 18
     1a6:	08 95       	ret
		else if(a == eS_PORTD5)
     1a8:	83 32       	cpi	r24, 0x23	; 35
     1aa:	91 05       	cpc	r25, r1
     1ac:	11 f4       	brne	.+4      	; 0x1b2 <pinChange+0x130>
		PORTD &= ~(1<<PD5);
     1ae:	95 98       	cbi	0x12, 5	; 18
     1b0:	08 95       	ret
		else if(a == eS_PORTD6)
     1b2:	84 32       	cpi	r24, 0x24	; 36
     1b4:	91 05       	cpc	r25, r1
     1b6:	11 f4       	brne	.+4      	; 0x1bc <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
     1b8:	96 98       	cbi	0x12, 6	; 18
     1ba:	08 95       	ret
		else if(a == eS_PORTD7)
     1bc:	85 97       	sbiw	r24, 0x25	; 37
     1be:	09 f0       	breq	.+2      	; 0x1c2 <pinChange+0x140>
     1c0:	9f c0       	rjmp	.+318    	; 0x300 <pinChange+0x27e>
		PORTD &= ~(1<<PD7);
     1c2:	97 98       	cbi	0x12, 7	; 18
     1c4:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     1c6:	00 97       	sbiw	r24, 0x00	; 0
     1c8:	11 f4       	brne	.+4      	; 0x1ce <pinChange+0x14c>
		PORTA |= (1<<PA0);
     1ca:	d8 9a       	sbi	0x1b, 0	; 27
     1cc:	08 95       	ret
		else if(a == eS_PORTA1)
     1ce:	81 30       	cpi	r24, 0x01	; 1
     1d0:	91 05       	cpc	r25, r1
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <pinChange+0x156>
		PORTA |= (1<<PA1);
     1d4:	d9 9a       	sbi	0x1b, 1	; 27
     1d6:	08 95       	ret
		else if(a == eS_PORTA2)
     1d8:	82 30       	cpi	r24, 0x02	; 2
     1da:	91 05       	cpc	r25, r1
     1dc:	11 f4       	brne	.+4      	; 0x1e2 <pinChange+0x160>
		PORTA |= (1<<PA2);
     1de:	da 9a       	sbi	0x1b, 2	; 27
     1e0:	08 95       	ret
		else if(a == eS_PORTA3)
     1e2:	83 30       	cpi	r24, 0x03	; 3
     1e4:	91 05       	cpc	r25, r1
     1e6:	11 f4       	brne	.+4      	; 0x1ec <pinChange+0x16a>
		PORTA |= (1<<PA3);
     1e8:	db 9a       	sbi	0x1b, 3	; 27
     1ea:	08 95       	ret
		else if(a == eS_PORTA4)
     1ec:	84 30       	cpi	r24, 0x04	; 4
     1ee:	91 05       	cpc	r25, r1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <pinChange+0x174>
		PORTA |= (1<<PA4);
     1f2:	dc 9a       	sbi	0x1b, 4	; 27
     1f4:	08 95       	ret
		else if(a == eS_PORTA5)
     1f6:	85 30       	cpi	r24, 0x05	; 5
     1f8:	91 05       	cpc	r25, r1
     1fa:	11 f4       	brne	.+4      	; 0x200 <pinChange+0x17e>
		PORTA |= (1<<PA5);
     1fc:	dd 9a       	sbi	0x1b, 5	; 27
     1fe:	08 95       	ret
		else if(a == eS_PORTA6)
     200:	86 30       	cpi	r24, 0x06	; 6
     202:	91 05       	cpc	r25, r1
     204:	11 f4       	brne	.+4      	; 0x20a <pinChange+0x188>
		PORTA |= (1<<PA6);
     206:	de 9a       	sbi	0x1b, 6	; 27
     208:	08 95       	ret
		else if(a == eS_PORTA7)
     20a:	87 30       	cpi	r24, 0x07	; 7
     20c:	91 05       	cpc	r25, r1
     20e:	11 f4       	brne	.+4      	; 0x214 <pinChange+0x192>
		PORTA |= (1<<PA7);
     210:	df 9a       	sbi	0x1b, 7	; 27
     212:	08 95       	ret
		else if(a == eS_PORTB0)
     214:	8a 30       	cpi	r24, 0x0A	; 10
     216:	91 05       	cpc	r25, r1
     218:	11 f4       	brne	.+4      	; 0x21e <pinChange+0x19c>
		PORTB |= (1<<PB0);
     21a:	c0 9a       	sbi	0x18, 0	; 24
     21c:	08 95       	ret
		else if(a == eS_PORTB1)
     21e:	8b 30       	cpi	r24, 0x0B	; 11
     220:	91 05       	cpc	r25, r1
     222:	11 f4       	brne	.+4      	; 0x228 <pinChange+0x1a6>
		PORTB |= (1<<PB1);
     224:	c1 9a       	sbi	0x18, 1	; 24
     226:	08 95       	ret
		else if(a == eS_PORTB2)
     228:	8c 30       	cpi	r24, 0x0C	; 12
     22a:	91 05       	cpc	r25, r1
     22c:	11 f4       	brne	.+4      	; 0x232 <pinChange+0x1b0>
		PORTB |= (1<<PB2);
     22e:	c2 9a       	sbi	0x18, 2	; 24
     230:	08 95       	ret
		else if(a == eS_PORTB3)
     232:	8d 30       	cpi	r24, 0x0D	; 13
     234:	91 05       	cpc	r25, r1
     236:	11 f4       	brne	.+4      	; 0x23c <pinChange+0x1ba>
		PORTB |= (1<<PB3);
     238:	c3 9a       	sbi	0x18, 3	; 24
     23a:	08 95       	ret
		else if(a == eS_PORTB4)
     23c:	8e 30       	cpi	r24, 0x0E	; 14
     23e:	91 05       	cpc	r25, r1
     240:	11 f4       	brne	.+4      	; 0x246 <pinChange+0x1c4>
		PORTB |= (1<<PB4);
     242:	c4 9a       	sbi	0x18, 4	; 24
     244:	08 95       	ret
		else if(a == eS_PORTB5)
     246:	8f 30       	cpi	r24, 0x0F	; 15
     248:	91 05       	cpc	r25, r1
     24a:	11 f4       	brne	.+4      	; 0x250 <pinChange+0x1ce>
		PORTB |= (1<<PB5);
     24c:	c5 9a       	sbi	0x18, 5	; 24
     24e:	08 95       	ret
		else if(a == eS_PORTB6)
     250:	80 31       	cpi	r24, 0x10	; 16
     252:	91 05       	cpc	r25, r1
     254:	11 f4       	brne	.+4      	; 0x25a <pinChange+0x1d8>
		PORTB |= (1<<PB6);
     256:	c6 9a       	sbi	0x18, 6	; 24
     258:	08 95       	ret
		else if(a == eS_PORTB7)
     25a:	81 31       	cpi	r24, 0x11	; 17
     25c:	91 05       	cpc	r25, r1
     25e:	11 f4       	brne	.+4      	; 0x264 <pinChange+0x1e2>
		PORTB |= (1<<PB7);
     260:	c7 9a       	sbi	0x18, 7	; 24
     262:	08 95       	ret
		else if(a == eS_PORTC0)
     264:	84 31       	cpi	r24, 0x14	; 20
     266:	91 05       	cpc	r25, r1
     268:	11 f4       	brne	.+4      	; 0x26e <pinChange+0x1ec>
		PORTC |= (1<<PC0);
     26a:	a8 9a       	sbi	0x15, 0	; 21
     26c:	08 95       	ret
		else if(a == eS_PORTC1)
     26e:	85 31       	cpi	r24, 0x15	; 21
     270:	91 05       	cpc	r25, r1
     272:	11 f4       	brne	.+4      	; 0x278 <pinChange+0x1f6>
		PORTC |= (1<<PC1);
     274:	a9 9a       	sbi	0x15, 1	; 21
     276:	08 95       	ret
		else if(a == eS_PORTC2)
     278:	86 31       	cpi	r24, 0x16	; 22
     27a:	91 05       	cpc	r25, r1
     27c:	11 f4       	brne	.+4      	; 0x282 <pinChange+0x200>
		PORTC |= (1<<PC2);
     27e:	aa 9a       	sbi	0x15, 2	; 21
     280:	08 95       	ret
		else if(a == eS_PORTC3)
     282:	87 31       	cpi	r24, 0x17	; 23
     284:	91 05       	cpc	r25, r1
     286:	11 f4       	brne	.+4      	; 0x28c <pinChange+0x20a>
		PORTC |= (1<<PC3);
     288:	ab 9a       	sbi	0x15, 3	; 21
     28a:	08 95       	ret
		else if(a == eS_PORTC4)
     28c:	88 31       	cpi	r24, 0x18	; 24
     28e:	91 05       	cpc	r25, r1
     290:	11 f4       	brne	.+4      	; 0x296 <pinChange+0x214>
		PORTC |= (1<<PC4);
     292:	ac 9a       	sbi	0x15, 4	; 21
     294:	08 95       	ret
		else if(a == eS_PORTC5)
     296:	89 31       	cpi	r24, 0x19	; 25
     298:	91 05       	cpc	r25, r1
     29a:	11 f4       	brne	.+4      	; 0x2a0 <pinChange+0x21e>
		PORTC |= (1<<PC5);
     29c:	ad 9a       	sbi	0x15, 5	; 21
     29e:	08 95       	ret
		else if(a == eS_PORTC6)
     2a0:	8a 31       	cpi	r24, 0x1A	; 26
     2a2:	91 05       	cpc	r25, r1
     2a4:	11 f4       	brne	.+4      	; 0x2aa <pinChange+0x228>
		PORTC |= (1<<PC6);
     2a6:	ae 9a       	sbi	0x15, 6	; 21
     2a8:	08 95       	ret
		else if(a == eS_PORTC7)
     2aa:	8b 31       	cpi	r24, 0x1B	; 27
     2ac:	91 05       	cpc	r25, r1
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <pinChange+0x232>
		PORTC |= (1<<PC7);
     2b0:	af 9a       	sbi	0x15, 7	; 21
     2b2:	08 95       	ret
		else if(a == eS_PORTD0)
     2b4:	8e 31       	cpi	r24, 0x1E	; 30
     2b6:	91 05       	cpc	r25, r1
     2b8:	11 f4       	brne	.+4      	; 0x2be <pinChange+0x23c>
		PORTD |= (1<<PD0);
     2ba:	90 9a       	sbi	0x12, 0	; 18
     2bc:	08 95       	ret
		else if(a == eS_PORTD1)
     2be:	8f 31       	cpi	r24, 0x1F	; 31
     2c0:	91 05       	cpc	r25, r1
     2c2:	11 f4       	brne	.+4      	; 0x2c8 <pinChange+0x246>
		PORTD |= (1<<PD1);
     2c4:	91 9a       	sbi	0x12, 1	; 18
     2c6:	08 95       	ret
		else if(a == eS_PORTD2)
     2c8:	80 32       	cpi	r24, 0x20	; 32
     2ca:	91 05       	cpc	r25, r1
     2cc:	11 f4       	brne	.+4      	; 0x2d2 <pinChange+0x250>
		PORTD |= (1<<PD2);
     2ce:	92 9a       	sbi	0x12, 2	; 18
     2d0:	08 95       	ret
		else if(a == eS_PORTD3)
     2d2:	81 32       	cpi	r24, 0x21	; 33
     2d4:	91 05       	cpc	r25, r1
     2d6:	11 f4       	brne	.+4      	; 0x2dc <pinChange+0x25a>
		PORTD |= (1<<PD3);
     2d8:	93 9a       	sbi	0x12, 3	; 18
     2da:	08 95       	ret
		else if(a == eS_PORTD4)
     2dc:	82 32       	cpi	r24, 0x22	; 34
     2de:	91 05       	cpc	r25, r1
     2e0:	11 f4       	brne	.+4      	; 0x2e6 <pinChange+0x264>
		PORTD |= (1<<PD4);
     2e2:	94 9a       	sbi	0x12, 4	; 18
     2e4:	08 95       	ret
		else if(a == eS_PORTD5)
     2e6:	83 32       	cpi	r24, 0x23	; 35
     2e8:	91 05       	cpc	r25, r1
     2ea:	11 f4       	brne	.+4      	; 0x2f0 <pinChange+0x26e>
		PORTD |= (1<<PD5);
     2ec:	95 9a       	sbi	0x12, 5	; 18
     2ee:	08 95       	ret
		else if(a == eS_PORTD6)
     2f0:	84 32       	cpi	r24, 0x24	; 36
     2f2:	91 05       	cpc	r25, r1
     2f4:	11 f4       	brne	.+4      	; 0x2fa <pinChange+0x278>
		PORTD |= (1<<PD6);
     2f6:	96 9a       	sbi	0x12, 6	; 18
     2f8:	08 95       	ret
		else if(a == eS_PORTD7)
     2fa:	85 97       	sbiw	r24, 0x25	; 37
     2fc:	09 f4       	brne	.+2      	; 0x300 <pinChange+0x27e>
		PORTD |= (1<<PD7);
     2fe:	97 9a       	sbi	0x12, 7	; 18
     300:	08 95       	ret

00000302 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
     302:	cf 93       	push	r28
     304:	c8 2f       	mov	r28, r24
	if(a & 1)
     306:	80 ff       	sbrs	r24, 0
     308:	07 c0       	rjmp	.+14     	; 0x318 <Lcd4_Port+0x16>
	pinChange(D4,1);
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	82 e2       	ldi	r24, 0x22	; 34
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
     316:	06 c0       	rjmp	.+12     	; 0x324 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	82 e2       	ldi	r24, 0x22	; 34
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 2)
     324:	c1 ff       	sbrs	r28, 1
     326:	07 c0       	rjmp	.+14     	; 0x336 <Lcd4_Port+0x34>
	pinChange(D5,1);
     328:	61 e0       	ldi	r22, 0x01	; 1
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	83 e2       	ldi	r24, 0x23	; 35
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
     334:	06 c0       	rjmp	.+12     	; 0x342 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	83 e2       	ldi	r24, 0x23	; 35
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 4)
     342:	c2 ff       	sbrs	r28, 2
     344:	07 c0       	rjmp	.+14     	; 0x354 <Lcd4_Port+0x52>
	pinChange(D6,1);
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	84 e2       	ldi	r24, 0x24	; 36
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
     352:	06 c0       	rjmp	.+12     	; 0x360 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	84 e2       	ldi	r24, 0x24	; 36
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 8)
     360:	c3 ff       	sbrs	r28, 3
     362:	07 c0       	rjmp	.+14     	; 0x372 <Lcd4_Port+0x70>
	pinChange(D7,1);
     364:	61 e0       	ldi	r22, 0x01	; 1
     366:	70 e0       	ldi	r23, 0x00	; 0
     368:	85 e2       	ldi	r24, 0x25	; 37
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
     370:	06 c0       	rjmp	.+12     	; 0x37e <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	70 e0       	ldi	r23, 0x00	; 0
     376:	85 e2       	ldi	r24, 0x25	; 37
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
}
     37e:	cf 91       	pop	r28
     380:	08 95       	ret

00000382 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     382:	cf 93       	push	r28
     384:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	8a e1       	ldi	r24, 0x1A	; 26
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(a);
     392:	8c 2f       	mov	r24, r28
     394:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	8b e1       	ldi	r24, 0x1B	; 27
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a4:	89 ef       	ldi	r24, 0xF9	; 249
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	01 97       	sbiw	r24, 0x01	; 1
     3aa:	f1 f7       	brne	.-4      	; 0x3a8 <Lcd4_Cmd+0x26>
     3ac:	00 c0       	rjmp	.+0      	; 0x3ae <Lcd4_Cmd+0x2c>
     3ae:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	8b e1       	ldi	r24, 0x1B	; 27
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
     3bc:	89 ef       	ldi	r24, 0xF9	; 249
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	f1 f7       	brne	.-4      	; 0x3c0 <Lcd4_Cmd+0x3e>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <Lcd4_Cmd+0x44>
     3c6:	00 00       	nop
	_delay_ms(1);
}
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <Lcd4_Set_Cursor>:
	Lcd4_Cmd(0);
	Lcd4_Cmd(1);
}

void Lcd4_Set_Cursor(char a, char b)
{
     3cc:	cf 93       	push	r28
     3ce:	c6 2f       	mov	r28, r22
	char temp,z,y;
	if(a == 1)
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	59 f4       	brne	.+22     	; 0x3ea <Lcd4_Set_Cursor+0x1e>
	{
		temp = 0x80 + b;
     3d4:	80 e8       	ldi	r24, 0x80	; 128
     3d6:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
     3d8:	82 95       	swap	r24
     3da:	8f 70       	andi	r24, 0x0F	; 15
     3dc:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     3e0:	8c 2f       	mov	r24, r28
     3e2:	8f 70       	andi	r24, 0x0F	; 15
     3e4:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
     3e8:	0c c0       	rjmp	.+24     	; 0x402 <Lcd4_Set_Cursor+0x36>
	}
	else if(a == 2)
     3ea:	82 30       	cpi	r24, 0x02	; 2
     3ec:	51 f4       	brne	.+20     	; 0x402 <Lcd4_Set_Cursor+0x36>
	{
		temp = 0xC0 + b;
     3ee:	80 ec       	ldi	r24, 0xC0	; 192
     3f0:	86 0f       	add	r24, r22
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     3f2:	82 95       	swap	r24
     3f4:	8f 70       	andi	r24, 0x0F	; 15
     3f6:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     3fa:	8c 2f       	mov	r24, r28
     3fc:	8f 70       	andi	r24, 0x0F	; 15
     3fe:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	}
}
     402:	cf 91       	pop	r28
     404:	08 95       	ret

00000406 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
     40c:	87 e8       	ldi	r24, 0x87	; 135
     40e:	93 e1       	ldi	r25, 0x13	; 19
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <Lcd4_Init+0xa>
     414:	00 c0       	rjmp	.+0      	; 0x416 <Lcd4_Init+0x10>
     416:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     418:	83 e0       	ldi	r24, 0x03	; 3
     41a:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
     41e:	81 ee       	ldi	r24, 0xE1	; 225
     420:	94 e0       	ldi	r25, 0x04	; 4
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <Lcd4_Init+0x1c>
     426:	00 c0       	rjmp	.+0      	; 0x428 <Lcd4_Init+0x22>
     428:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     42a:	83 e0       	ldi	r24, 0x03	; 3
     42c:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
     430:	8d eb       	ldi	r24, 0xBD	; 189
     432:	9a e0       	ldi	r25, 0x0A	; 10
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <Lcd4_Init+0x2e>
     438:	00 c0       	rjmp	.+0      	; 0x43a <Lcd4_Init+0x34>
     43a:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     43c:	83 e0       	ldi	r24, 0x03	; 3
     43e:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     442:	82 e0       	ldi	r24, 0x02	; 2
     444:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     44e:	88 e0       	ldi	r24, 0x08	; 8
     450:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     45a:	8c e0       	ldi	r24, 0x0C	; 12
     45c:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     466:	86 e0       	ldi	r24, 0x06	; 6
     468:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
     46c:	08 95       	ret

0000046e <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
     46e:	cf 93       	push	r28
     470:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     472:	61 e0       	ldi	r22, 0x01	; 1
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	8a e1       	ldi	r24, 0x1A	; 26
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     47e:	8c 2f       	mov	r24, r28
     480:	82 95       	swap	r24
     482:	8f 70       	andi	r24, 0x0F	; 15
     484:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
	pinChange(EN,1);
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	8b e1       	ldi	r24, 0x1B	; 27
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
     494:	89 ef       	ldi	r24, 0xF9	; 249
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <Lcd4_Write_Char+0x2a>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <Lcd4_Write_Char+0x30>
     49e:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     4a0:	60 e0       	ldi	r22, 0x00	; 0
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	8b e1       	ldi	r24, 0x1B	; 27
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
     4ac:	89 ef       	ldi	r24, 0xF9	; 249
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	01 97       	sbiw	r24, 0x01	; 1
     4b2:	f1 f7       	brne	.-4      	; 0x4b0 <Lcd4_Write_Char+0x42>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <Lcd4_Write_Char+0x48>
     4b6:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
     4b8:	8c 2f       	mov	r24, r28
     4ba:	8f 70       	andi	r24, 0x0F	; 15
     4bc:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
	pinChange(EN,1);
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	8b e1       	ldi	r24, 0x1B	; 27
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
     4cc:	89 ef       	ldi	r24, 0xF9	; 249
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <Lcd4_Write_Char+0x62>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <Lcd4_Write_Char+0x68>
     4d6:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	8b e1       	ldi	r24, 0x1B	; 27
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
     4e4:	89 ef       	ldi	r24, 0xF9	; 249
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <Lcd4_Write_Char+0x7a>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <Lcd4_Write_Char+0x80>
     4ee:	00 00       	nop
	_delay_ms(1);
}
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
     4fa:	88 81       	ld	r24, Y
     4fc:	88 23       	and	r24, r24
     4fe:	31 f0       	breq	.+12     	; 0x50c <Lcd4_Write_String+0x18>
     500:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
     502:	0e 94 37 02 	call	0x46e	; 0x46e <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     506:	89 91       	ld	r24, Y+
     508:	81 11       	cpse	r24, r1
     50a:	fb cf       	rjmp	.-10     	; 0x502 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <ADC_init>:
#include <util/delay.h>
#include <stdio.h>
#include "lcd.h" //Can be download from the bottom of this article

void ADC_init() {
	ADMUX |= (1 << REFS0);
     512:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     514:	86 b1       	in	r24, 0x06	; 6
     516:	87 68       	ori	r24, 0x87	; 135
     518:	86 b9       	out	0x06, r24	; 6
     51a:	08 95       	ret

0000051c <ADC_read>:
}

uint16_t ADC_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
     51c:	97 b1       	in	r25, 0x07	; 7
     51e:	8f 70       	andi	r24, 0x0F	; 15
     520:	90 7f       	andi	r25, 0xF0	; 240
     522:	89 2b       	or	r24, r25
     524:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
     526:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC));
     528:	36 99       	sbic	0x06, 6	; 6
     52a:	fe cf       	rjmp	.-4      	; 0x528 <ADC_read+0xc>
	return ADC;
     52c:	84 b1       	in	r24, 0x04	; 4
     52e:	95 b1       	in	r25, 0x05	; 5
}
     530:	08 95       	ret

00000532 <printVoltageToLcd>:

void printVoltageToLcd(float voltage){
     532:	8f 92       	push	r8
     534:	9f 92       	push	r9
     536:	af 92       	push	r10
     538:	bf 92       	push	r11
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	60 97       	sbiw	r28, 0x10	; 16
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	4b 01       	movw	r8, r22
     558:	5c 01       	movw	r10, r24
	char s[16];
	int intPortion = (int)voltage;
     55a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fixsfsi>
	sprintf(s, "%d", intPortion);
     55e:	7f 93       	push	r23
     560:	6f 93       	push	r22
     562:	0f 2e       	mov	r0, r31
     564:	f0 e6       	ldi	r31, 0x60	; 96
     566:	ef 2e       	mov	r14, r31
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	ff 2e       	mov	r15, r31
     56c:	f0 2d       	mov	r31, r0
     56e:	ff 92       	push	r15
     570:	ef 92       	push	r14
     572:	8e 01       	movw	r16, r28
     574:	0f 5f       	subi	r16, 0xFF	; 255
     576:	1f 4f       	sbci	r17, 0xFF	; 255
     578:	1f 93       	push	r17
     57a:	0f 93       	push	r16
     57c:	0e 94 72 05 	call	0xae4	; 0xae4 <sprintf>
	Lcd4_Write_String(s);
     580:	c8 01       	movw	r24, r16
     582:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Lcd4_Write_String>
	
	Lcd4_Write_Char('.');
     586:	8e e2       	ldi	r24, 0x2E	; 46
     588:	0e 94 37 02 	call	0x46e	; 0x46e <Lcd4_Write_Char>
	
	int decimalPortion = ((int)(voltage * 100)) % 10;
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	48 ec       	ldi	r20, 0xC8	; 200
     592:	52 e4       	ldi	r21, 0x42	; 66
     594:	c5 01       	movw	r24, r10
     596:	b4 01       	movw	r22, r8
     598:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__mulsf3>
     59c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <__fixsfsi>
     5a0:	cb 01       	movw	r24, r22
     5a2:	6a e0       	ldi	r22, 0x0A	; 10
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	0e 94 4a 05 	call	0xa94	; 0xa94 <__divmodhi4>
	sprintf(s, "%d", decimalPortion);
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	ff 92       	push	r15
     5b0:	ef 92       	push	r14
     5b2:	1f 93       	push	r17
     5b4:	0f 93       	push	r16
     5b6:	0e 94 72 05 	call	0xae4	; 0xae4 <sprintf>
	Lcd4_Write_String(s);
     5ba:	c8 01       	movw	r24, r16
     5bc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Lcd4_Write_String>
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
}
     5ca:	60 96       	adiw	r28, 0x10	; 16
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	0f 91       	pop	r16
     5de:	ff 90       	pop	r15
     5e0:	ef 90       	pop	r14
     5e2:	bf 90       	pop	r11
     5e4:	af 90       	pop	r10
     5e6:	9f 90       	pop	r9
     5e8:	8f 90       	pop	r8
     5ea:	08 95       	ret

000005ec <main>:

int main(void)
{
	DDRD = 0xFF;
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
     5f0:	84 bb       	out	0x14, r24	; 20
	// int i;
	ADC_init();
     5f2:	0e 94 89 02 	call	0x512	; 0x512 <ADC_init>
	Lcd4_Init();
     5f6:	0e 94 03 02 	call	0x406	; 0x406 <Lcd4_Init>
	uint16_t adc_value;
	float voltage;
	while(1)
	{
		adc_value = ADC_read(0);
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	0e 94 8e 02 	call	0x51c	; 0x51c <ADC_read>
     600:	ec 01       	movw	r28, r24
		Lcd4_Set_Cursor(1,0);
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lcd4_Set_Cursor>
		Lcd4_Write_String("Temp:");
     60a:	83 e6       	ldi	r24, 0x63	; 99
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Lcd4_Write_String>
		//printVoltageToLcd(adc_value);
		voltage = (float)adc_value * 9.0 / 1024.0;
     612:	be 01       	movw	r22, r28
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 26 04 	call	0x84c	; 0x84c <__floatunsisf>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	40 e1       	ldi	r20, 0x10	; 16
     622:	51 e4       	ldi	r21, 0x41	; 65
     624:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__mulsf3>
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e8       	ldi	r20, 0x80	; 128
     62e:	5a e3       	ldi	r21, 0x3A	; 58
     630:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__mulsf3>
		//sprintf(s, "%0.2f V", 12.5);
		voltage=voltage*60.0-5.0;
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e7       	ldi	r20, 0x70	; 112
     63a:	52 e4       	ldi	r21, 0x42	; 66
     63c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__mulsf3>
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	30 e0       	ldi	r19, 0x00	; 0
     644:	40 ea       	ldi	r20, 0xA0	; 160
     646:	50 e4       	ldi	r21, 0x40	; 64
     648:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__subsf3>
     64c:	6b 01       	movw	r12, r22
     64e:	7c 01       	movw	r14, r24
		//Lcd4_Set_Cursor(1,1);
		//Lcd4_Write_String(s);
		printVoltageToLcd(voltage);
     650:	0e 94 99 02 	call	0x532	; 0x532 <printVoltageToLcd>
		Lcd4_Set_Cursor(1,10);
     654:	6a e0       	ldi	r22, 0x0A	; 10
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lcd4_Set_Cursor>
		if(voltage>35){
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	4c e0       	ldi	r20, 0x0C	; 12
     662:	52 e4       	ldi	r21, 0x42	; 66
     664:	c7 01       	movw	r24, r14
     666:	b6 01       	movw	r22, r12
     668:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <__gesf2>
     66c:	18 16       	cp	r1, r24
     66e:	2c f4       	brge	.+10     	; 0x67a <main+0x8e>
			Lcd4_Write_String(" Hot");
     670:	89 e6       	ldi	r24, 0x69	; 105
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Lcd4_Write_String>
     678:	13 c0       	rjmp	.+38     	; 0x6a0 <main+0xb4>
		}else if(voltage<15){
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	40 e7       	ldi	r20, 0x70	; 112
     680:	51 e4       	ldi	r21, 0x41	; 65
     682:	c7 01       	movw	r24, r14
     684:	b6 01       	movw	r22, r12
     686:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__cmpsf2>
     68a:	88 23       	and	r24, r24
     68c:	2c f4       	brge	.+10     	; 0x698 <main+0xac>
			Lcd4_Write_String(" Cold");
     68e:	8e e6       	ldi	r24, 0x6E	; 110
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Lcd4_Write_String>
     696:	04 c0       	rjmp	.+8      	; 0x6a0 <main+0xb4>
		}else{
			Lcd4_Write_String(" Normal");
     698:	84 e7       	ldi	r24, 0x74	; 116
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Lcd4_Write_String>
		}
		Lcd4_Set_Cursor(2,0);
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lcd4_Set_Cursor>

		adc_value = ADC_read(1);
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 8e 02 	call	0x51c	; 0x51c <ADC_read>
     6ae:	ec 01       	movw	r28, r24
		Lcd4_Write_String("Sound:");
     6b0:	8c e7       	ldi	r24, 0x7C	; 124
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Lcd4_Write_String>
		//printVoltageToLcd(adc_value);
		voltage = (float)adc_value * 9.0 / 1024.0;
     6b8:	be 01       	movw	r22, r28
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 26 04 	call	0x84c	; 0x84c <__floatunsisf>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e1       	ldi	r20, 0x10	; 16
     6c8:	51 e4       	ldi	r21, 0x41	; 65
     6ca:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__mulsf3>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e8       	ldi	r20, 0x80	; 128
     6d4:	5a e3       	ldi	r21, 0x3A	; 58
     6d6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__mulsf3>
		//sprintf(s, "%0.2f V", 12.5);
		voltage=voltage*6.0;
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	40 ec       	ldi	r20, 0xC0	; 192
     6e0:	50 e4       	ldi	r21, 0x40	; 64
     6e2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__mulsf3>
		//Lcd4_Set_Cursor(1,1);
		//Lcd4_Write_String(s);
		printVoltageToLcd(voltage);
     6e6:	0e 94 99 02 	call	0x532	; 0x532 <printVoltageToLcd>
		
		Lcd4_Set_Cursor(2,10);
     6ea:	6a e0       	ldi	r22, 0x0A	; 10
     6ec:	82 e0       	ldi	r24, 0x02	; 2
     6ee:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lcd4_Set_Cursor>
		Lcd4_Write_String(" DB");
     6f2:	83 e8       	ldi	r24, 0x83	; 131
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Lcd4_Write_String>
		Lcd4_Set_Cursor(2,1);
		Lcd4_Write_Char('e');
		Lcd4_Write_Char('S');
		_delay_ms(2000);
		*/
	}
     6fa:	7f cf       	rjmp	.-258    	; 0x5fa <main+0xe>

000006fc <__subsf3>:
     6fc:	50 58       	subi	r21, 0x80	; 128

000006fe <__addsf3>:
     6fe:	bb 27       	eor	r27, r27
     700:	aa 27       	eor	r26, r26
     702:	0e 94 96 03 	call	0x72c	; 0x72c <__addsf3x>
     706:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_round>
     70a:	0e 94 90 04 	call	0x920	; 0x920 <__fp_pscA>
     70e:	38 f0       	brcs	.+14     	; 0x71e <__addsf3+0x20>
     710:	0e 94 97 04 	call	0x92e	; 0x92e <__fp_pscB>
     714:	20 f0       	brcs	.+8      	; 0x71e <__addsf3+0x20>
     716:	39 f4       	brne	.+14     	; 0x726 <__addsf3+0x28>
     718:	9f 3f       	cpi	r25, 0xFF	; 255
     71a:	19 f4       	brne	.+6      	; 0x722 <__addsf3+0x24>
     71c:	26 f4       	brtc	.+8      	; 0x726 <__addsf3+0x28>
     71e:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_nan>
     722:	0e f4       	brtc	.+2      	; 0x726 <__addsf3+0x28>
     724:	e0 95       	com	r30
     726:	e7 fb       	bst	r30, 7
     728:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_inf>

0000072c <__addsf3x>:
     72c:	e9 2f       	mov	r30, r25
     72e:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_split3>
     732:	58 f3       	brcs	.-42     	; 0x70a <__addsf3+0xc>
     734:	ba 17       	cp	r27, r26
     736:	62 07       	cpc	r22, r18
     738:	73 07       	cpc	r23, r19
     73a:	84 07       	cpc	r24, r20
     73c:	95 07       	cpc	r25, r21
     73e:	20 f0       	brcs	.+8      	; 0x748 <__addsf3x+0x1c>
     740:	79 f4       	brne	.+30     	; 0x760 <__addsf3x+0x34>
     742:	a6 f5       	brtc	.+104    	; 0x7ac <__addsf3x+0x80>
     744:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__fp_zero>
     748:	0e f4       	brtc	.+2      	; 0x74c <__addsf3x+0x20>
     74a:	e0 95       	com	r30
     74c:	0b 2e       	mov	r0, r27
     74e:	ba 2f       	mov	r27, r26
     750:	a0 2d       	mov	r26, r0
     752:	0b 01       	movw	r0, r22
     754:	b9 01       	movw	r22, r18
     756:	90 01       	movw	r18, r0
     758:	0c 01       	movw	r0, r24
     75a:	ca 01       	movw	r24, r20
     75c:	a0 01       	movw	r20, r0
     75e:	11 24       	eor	r1, r1
     760:	ff 27       	eor	r31, r31
     762:	59 1b       	sub	r21, r25
     764:	99 f0       	breq	.+38     	; 0x78c <__addsf3x+0x60>
     766:	59 3f       	cpi	r21, 0xF9	; 249
     768:	50 f4       	brcc	.+20     	; 0x77e <__addsf3x+0x52>
     76a:	50 3e       	cpi	r21, 0xE0	; 224
     76c:	68 f1       	brcs	.+90     	; 0x7c8 <__addsf3x+0x9c>
     76e:	1a 16       	cp	r1, r26
     770:	f0 40       	sbci	r31, 0x00	; 0
     772:	a2 2f       	mov	r26, r18
     774:	23 2f       	mov	r18, r19
     776:	34 2f       	mov	r19, r20
     778:	44 27       	eor	r20, r20
     77a:	58 5f       	subi	r21, 0xF8	; 248
     77c:	f3 cf       	rjmp	.-26     	; 0x764 <__addsf3x+0x38>
     77e:	46 95       	lsr	r20
     780:	37 95       	ror	r19
     782:	27 95       	ror	r18
     784:	a7 95       	ror	r26
     786:	f0 40       	sbci	r31, 0x00	; 0
     788:	53 95       	inc	r21
     78a:	c9 f7       	brne	.-14     	; 0x77e <__addsf3x+0x52>
     78c:	7e f4       	brtc	.+30     	; 0x7ac <__addsf3x+0x80>
     78e:	1f 16       	cp	r1, r31
     790:	ba 0b       	sbc	r27, r26
     792:	62 0b       	sbc	r22, r18
     794:	73 0b       	sbc	r23, r19
     796:	84 0b       	sbc	r24, r20
     798:	ba f0       	brmi	.+46     	; 0x7c8 <__addsf3x+0x9c>
     79a:	91 50       	subi	r25, 0x01	; 1
     79c:	a1 f0       	breq	.+40     	; 0x7c6 <__addsf3x+0x9a>
     79e:	ff 0f       	add	r31, r31
     7a0:	bb 1f       	adc	r27, r27
     7a2:	66 1f       	adc	r22, r22
     7a4:	77 1f       	adc	r23, r23
     7a6:	88 1f       	adc	r24, r24
     7a8:	c2 f7       	brpl	.-16     	; 0x79a <__addsf3x+0x6e>
     7aa:	0e c0       	rjmp	.+28     	; 0x7c8 <__addsf3x+0x9c>
     7ac:	ba 0f       	add	r27, r26
     7ae:	62 1f       	adc	r22, r18
     7b0:	73 1f       	adc	r23, r19
     7b2:	84 1f       	adc	r24, r20
     7b4:	48 f4       	brcc	.+18     	; 0x7c8 <__addsf3x+0x9c>
     7b6:	87 95       	ror	r24
     7b8:	77 95       	ror	r23
     7ba:	67 95       	ror	r22
     7bc:	b7 95       	ror	r27
     7be:	f7 95       	ror	r31
     7c0:	9e 3f       	cpi	r25, 0xFE	; 254
     7c2:	08 f0       	brcs	.+2      	; 0x7c6 <__addsf3x+0x9a>
     7c4:	b0 cf       	rjmp	.-160    	; 0x726 <__addsf3+0x28>
     7c6:	93 95       	inc	r25
     7c8:	88 0f       	add	r24, r24
     7ca:	08 f0       	brcs	.+2      	; 0x7ce <__addsf3x+0xa2>
     7cc:	99 27       	eor	r25, r25
     7ce:	ee 0f       	add	r30, r30
     7d0:	97 95       	ror	r25
     7d2:	87 95       	ror	r24
     7d4:	08 95       	ret

000007d6 <__cmpsf2>:
     7d6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_cmp>
     7da:	08 f4       	brcc	.+2      	; 0x7de <__cmpsf2+0x8>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	08 95       	ret

000007e0 <__fixsfsi>:
     7e0:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fixunssfsi>
     7e4:	68 94       	set
     7e6:	b1 11       	cpse	r27, r1
     7e8:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_szero>
     7ec:	08 95       	ret

000007ee <__fixunssfsi>:
     7ee:	0e 94 b7 04 	call	0x96e	; 0x96e <__fp_splitA>
     7f2:	88 f0       	brcs	.+34     	; 0x816 <__fixunssfsi+0x28>
     7f4:	9f 57       	subi	r25, 0x7F	; 127
     7f6:	98 f0       	brcs	.+38     	; 0x81e <__fixunssfsi+0x30>
     7f8:	b9 2f       	mov	r27, r25
     7fa:	99 27       	eor	r25, r25
     7fc:	b7 51       	subi	r27, 0x17	; 23
     7fe:	b0 f0       	brcs	.+44     	; 0x82c <__fixunssfsi+0x3e>
     800:	e1 f0       	breq	.+56     	; 0x83a <__fixunssfsi+0x4c>
     802:	66 0f       	add	r22, r22
     804:	77 1f       	adc	r23, r23
     806:	88 1f       	adc	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	1a f0       	brmi	.+6      	; 0x812 <__fixunssfsi+0x24>
     80c:	ba 95       	dec	r27
     80e:	c9 f7       	brne	.-14     	; 0x802 <__fixunssfsi+0x14>
     810:	14 c0       	rjmp	.+40     	; 0x83a <__fixunssfsi+0x4c>
     812:	b1 30       	cpi	r27, 0x01	; 1
     814:	91 f0       	breq	.+36     	; 0x83a <__fixunssfsi+0x4c>
     816:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_zero>
     81a:	b1 e0       	ldi	r27, 0x01	; 1
     81c:	08 95       	ret
     81e:	0c 94 d1 04 	jmp	0x9a2	; 0x9a2 <__fp_zero>
     822:	67 2f       	mov	r22, r23
     824:	78 2f       	mov	r23, r24
     826:	88 27       	eor	r24, r24
     828:	b8 5f       	subi	r27, 0xF8	; 248
     82a:	39 f0       	breq	.+14     	; 0x83a <__fixunssfsi+0x4c>
     82c:	b9 3f       	cpi	r27, 0xF9	; 249
     82e:	cc f3       	brlt	.-14     	; 0x822 <__fixunssfsi+0x34>
     830:	86 95       	lsr	r24
     832:	77 95       	ror	r23
     834:	67 95       	ror	r22
     836:	b3 95       	inc	r27
     838:	d9 f7       	brne	.-10     	; 0x830 <__fixunssfsi+0x42>
     83a:	3e f4       	brtc	.+14     	; 0x84a <__fixunssfsi+0x5c>
     83c:	90 95       	com	r25
     83e:	80 95       	com	r24
     840:	70 95       	com	r23
     842:	61 95       	neg	r22
     844:	7f 4f       	sbci	r23, 0xFF	; 255
     846:	8f 4f       	sbci	r24, 0xFF	; 255
     848:	9f 4f       	sbci	r25, 0xFF	; 255
     84a:	08 95       	ret

0000084c <__floatunsisf>:
     84c:	e8 94       	clt
     84e:	09 c0       	rjmp	.+18     	; 0x862 <__stack+0x3>

00000850 <__floatsisf>:
     850:	97 fb       	bst	r25, 7
     852:	3e f4       	brtc	.+14     	; 0x862 <__stack+0x3>
     854:	90 95       	com	r25
     856:	80 95       	com	r24
     858:	70 95       	com	r23
     85a:	61 95       	neg	r22
     85c:	7f 4f       	sbci	r23, 0xFF	; 255
     85e:	8f 4f       	sbci	r24, 0xFF	; 255
     860:	9f 4f       	sbci	r25, 0xFF	; 255
     862:	99 23       	and	r25, r25
     864:	a9 f0       	breq	.+42     	; 0x890 <__stack+0x31>
     866:	f9 2f       	mov	r31, r25
     868:	96 e9       	ldi	r25, 0x96	; 150
     86a:	bb 27       	eor	r27, r27
     86c:	93 95       	inc	r25
     86e:	f6 95       	lsr	r31
     870:	87 95       	ror	r24
     872:	77 95       	ror	r23
     874:	67 95       	ror	r22
     876:	b7 95       	ror	r27
     878:	f1 11       	cpse	r31, r1
     87a:	f8 cf       	rjmp	.-16     	; 0x86c <__stack+0xd>
     87c:	fa f4       	brpl	.+62     	; 0x8bc <__stack+0x5d>
     87e:	bb 0f       	add	r27, r27
     880:	11 f4       	brne	.+4      	; 0x886 <__stack+0x27>
     882:	60 ff       	sbrs	r22, 0
     884:	1b c0       	rjmp	.+54     	; 0x8bc <__stack+0x5d>
     886:	6f 5f       	subi	r22, 0xFF	; 255
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	8f 4f       	sbci	r24, 0xFF	; 255
     88c:	9f 4f       	sbci	r25, 0xFF	; 255
     88e:	16 c0       	rjmp	.+44     	; 0x8bc <__stack+0x5d>
     890:	88 23       	and	r24, r24
     892:	11 f0       	breq	.+4      	; 0x898 <__stack+0x39>
     894:	96 e9       	ldi	r25, 0x96	; 150
     896:	11 c0       	rjmp	.+34     	; 0x8ba <__stack+0x5b>
     898:	77 23       	and	r23, r23
     89a:	21 f0       	breq	.+8      	; 0x8a4 <__stack+0x45>
     89c:	9e e8       	ldi	r25, 0x8E	; 142
     89e:	87 2f       	mov	r24, r23
     8a0:	76 2f       	mov	r23, r22
     8a2:	05 c0       	rjmp	.+10     	; 0x8ae <__stack+0x4f>
     8a4:	66 23       	and	r22, r22
     8a6:	71 f0       	breq	.+28     	; 0x8c4 <__stack+0x65>
     8a8:	96 e8       	ldi	r25, 0x86	; 134
     8aa:	86 2f       	mov	r24, r22
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	2a f0       	brmi	.+10     	; 0x8bc <__stack+0x5d>
     8b2:	9a 95       	dec	r25
     8b4:	66 0f       	add	r22, r22
     8b6:	77 1f       	adc	r23, r23
     8b8:	88 1f       	adc	r24, r24
     8ba:	da f7       	brpl	.-10     	; 0x8b2 <__stack+0x53>
     8bc:	88 0f       	add	r24, r24
     8be:	96 95       	lsr	r25
     8c0:	87 95       	ror	r24
     8c2:	97 f9       	bld	r25, 7
     8c4:	08 95       	ret

000008c6 <__fp_cmp>:
     8c6:	99 0f       	add	r25, r25
     8c8:	00 08       	sbc	r0, r0
     8ca:	55 0f       	add	r21, r21
     8cc:	aa 0b       	sbc	r26, r26
     8ce:	e0 e8       	ldi	r30, 0x80	; 128
     8d0:	fe ef       	ldi	r31, 0xFE	; 254
     8d2:	16 16       	cp	r1, r22
     8d4:	17 06       	cpc	r1, r23
     8d6:	e8 07       	cpc	r30, r24
     8d8:	f9 07       	cpc	r31, r25
     8da:	c0 f0       	brcs	.+48     	; 0x90c <__fp_cmp+0x46>
     8dc:	12 16       	cp	r1, r18
     8de:	13 06       	cpc	r1, r19
     8e0:	e4 07       	cpc	r30, r20
     8e2:	f5 07       	cpc	r31, r21
     8e4:	98 f0       	brcs	.+38     	; 0x90c <__fp_cmp+0x46>
     8e6:	62 1b       	sub	r22, r18
     8e8:	73 0b       	sbc	r23, r19
     8ea:	84 0b       	sbc	r24, r20
     8ec:	95 0b       	sbc	r25, r21
     8ee:	39 f4       	brne	.+14     	; 0x8fe <__fp_cmp+0x38>
     8f0:	0a 26       	eor	r0, r26
     8f2:	61 f0       	breq	.+24     	; 0x90c <__fp_cmp+0x46>
     8f4:	23 2b       	or	r18, r19
     8f6:	24 2b       	or	r18, r20
     8f8:	25 2b       	or	r18, r21
     8fa:	21 f4       	brne	.+8      	; 0x904 <__fp_cmp+0x3e>
     8fc:	08 95       	ret
     8fe:	0a 26       	eor	r0, r26
     900:	09 f4       	brne	.+2      	; 0x904 <__fp_cmp+0x3e>
     902:	a1 40       	sbci	r26, 0x01	; 1
     904:	a6 95       	lsr	r26
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	81 1d       	adc	r24, r1
     90a:	81 1d       	adc	r24, r1
     90c:	08 95       	ret

0000090e <__fp_inf>:
     90e:	97 f9       	bld	r25, 7
     910:	9f 67       	ori	r25, 0x7F	; 127
     912:	80 e8       	ldi	r24, 0x80	; 128
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	08 95       	ret

0000091a <__fp_nan>:
     91a:	9f ef       	ldi	r25, 0xFF	; 255
     91c:	80 ec       	ldi	r24, 0xC0	; 192
     91e:	08 95       	ret

00000920 <__fp_pscA>:
     920:	00 24       	eor	r0, r0
     922:	0a 94       	dec	r0
     924:	16 16       	cp	r1, r22
     926:	17 06       	cpc	r1, r23
     928:	18 06       	cpc	r1, r24
     92a:	09 06       	cpc	r0, r25
     92c:	08 95       	ret

0000092e <__fp_pscB>:
     92e:	00 24       	eor	r0, r0
     930:	0a 94       	dec	r0
     932:	12 16       	cp	r1, r18
     934:	13 06       	cpc	r1, r19
     936:	14 06       	cpc	r1, r20
     938:	05 06       	cpc	r0, r21
     93a:	08 95       	ret

0000093c <__fp_round>:
     93c:	09 2e       	mov	r0, r25
     93e:	03 94       	inc	r0
     940:	00 0c       	add	r0, r0
     942:	11 f4       	brne	.+4      	; 0x948 <__fp_round+0xc>
     944:	88 23       	and	r24, r24
     946:	52 f0       	brmi	.+20     	; 0x95c <__fp_round+0x20>
     948:	bb 0f       	add	r27, r27
     94a:	40 f4       	brcc	.+16     	; 0x95c <__fp_round+0x20>
     94c:	bf 2b       	or	r27, r31
     94e:	11 f4       	brne	.+4      	; 0x954 <__fp_round+0x18>
     950:	60 ff       	sbrs	r22, 0
     952:	04 c0       	rjmp	.+8      	; 0x95c <__fp_round+0x20>
     954:	6f 5f       	subi	r22, 0xFF	; 255
     956:	7f 4f       	sbci	r23, 0xFF	; 255
     958:	8f 4f       	sbci	r24, 0xFF	; 255
     95a:	9f 4f       	sbci	r25, 0xFF	; 255
     95c:	08 95       	ret

0000095e <__fp_split3>:
     95e:	57 fd       	sbrc	r21, 7
     960:	90 58       	subi	r25, 0x80	; 128
     962:	44 0f       	add	r20, r20
     964:	55 1f       	adc	r21, r21
     966:	59 f0       	breq	.+22     	; 0x97e <__fp_splitA+0x10>
     968:	5f 3f       	cpi	r21, 0xFF	; 255
     96a:	71 f0       	breq	.+28     	; 0x988 <__fp_splitA+0x1a>
     96c:	47 95       	ror	r20

0000096e <__fp_splitA>:
     96e:	88 0f       	add	r24, r24
     970:	97 fb       	bst	r25, 7
     972:	99 1f       	adc	r25, r25
     974:	61 f0       	breq	.+24     	; 0x98e <__fp_splitA+0x20>
     976:	9f 3f       	cpi	r25, 0xFF	; 255
     978:	79 f0       	breq	.+30     	; 0x998 <__fp_splitA+0x2a>
     97a:	87 95       	ror	r24
     97c:	08 95       	ret
     97e:	12 16       	cp	r1, r18
     980:	13 06       	cpc	r1, r19
     982:	14 06       	cpc	r1, r20
     984:	55 1f       	adc	r21, r21
     986:	f2 cf       	rjmp	.-28     	; 0x96c <__fp_split3+0xe>
     988:	46 95       	lsr	r20
     98a:	f1 df       	rcall	.-30     	; 0x96e <__fp_splitA>
     98c:	08 c0       	rjmp	.+16     	; 0x99e <__fp_splitA+0x30>
     98e:	16 16       	cp	r1, r22
     990:	17 06       	cpc	r1, r23
     992:	18 06       	cpc	r1, r24
     994:	99 1f       	adc	r25, r25
     996:	f1 cf       	rjmp	.-30     	; 0x97a <__fp_splitA+0xc>
     998:	86 95       	lsr	r24
     99a:	71 05       	cpc	r23, r1
     99c:	61 05       	cpc	r22, r1
     99e:	08 94       	sec
     9a0:	08 95       	ret

000009a2 <__fp_zero>:
     9a2:	e8 94       	clt

000009a4 <__fp_szero>:
     9a4:	bb 27       	eor	r27, r27
     9a6:	66 27       	eor	r22, r22
     9a8:	77 27       	eor	r23, r23
     9aa:	cb 01       	movw	r24, r22
     9ac:	97 f9       	bld	r25, 7
     9ae:	08 95       	ret

000009b0 <__gesf2>:
     9b0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__fp_cmp>
     9b4:	08 f4       	brcc	.+2      	; 0x9b8 <__gesf2+0x8>
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	08 95       	ret

000009ba <__mulsf3>:
     9ba:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__mulsf3x>
     9be:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_round>
     9c2:	0e 94 90 04 	call	0x920	; 0x920 <__fp_pscA>
     9c6:	38 f0       	brcs	.+14     	; 0x9d6 <__mulsf3+0x1c>
     9c8:	0e 94 97 04 	call	0x92e	; 0x92e <__fp_pscB>
     9cc:	20 f0       	brcs	.+8      	; 0x9d6 <__mulsf3+0x1c>
     9ce:	95 23       	and	r25, r21
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <__mulsf3+0x1c>
     9d2:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_inf>
     9d6:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_nan>
     9da:	11 24       	eor	r1, r1
     9dc:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_szero>

000009e0 <__mulsf3x>:
     9e0:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_split3>
     9e4:	70 f3       	brcs	.-36     	; 0x9c2 <__mulsf3+0x8>

000009e6 <__mulsf3_pse>:
     9e6:	95 9f       	mul	r25, r21
     9e8:	c1 f3       	breq	.-16     	; 0x9da <__mulsf3+0x20>
     9ea:	95 0f       	add	r25, r21
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	55 1f       	adc	r21, r21
     9f0:	62 9f       	mul	r22, r18
     9f2:	f0 01       	movw	r30, r0
     9f4:	72 9f       	mul	r23, r18
     9f6:	bb 27       	eor	r27, r27
     9f8:	f0 0d       	add	r31, r0
     9fa:	b1 1d       	adc	r27, r1
     9fc:	63 9f       	mul	r22, r19
     9fe:	aa 27       	eor	r26, r26
     a00:	f0 0d       	add	r31, r0
     a02:	b1 1d       	adc	r27, r1
     a04:	aa 1f       	adc	r26, r26
     a06:	64 9f       	mul	r22, r20
     a08:	66 27       	eor	r22, r22
     a0a:	b0 0d       	add	r27, r0
     a0c:	a1 1d       	adc	r26, r1
     a0e:	66 1f       	adc	r22, r22
     a10:	82 9f       	mul	r24, r18
     a12:	22 27       	eor	r18, r18
     a14:	b0 0d       	add	r27, r0
     a16:	a1 1d       	adc	r26, r1
     a18:	62 1f       	adc	r22, r18
     a1a:	73 9f       	mul	r23, r19
     a1c:	b0 0d       	add	r27, r0
     a1e:	a1 1d       	adc	r26, r1
     a20:	62 1f       	adc	r22, r18
     a22:	83 9f       	mul	r24, r19
     a24:	a0 0d       	add	r26, r0
     a26:	61 1d       	adc	r22, r1
     a28:	22 1f       	adc	r18, r18
     a2a:	74 9f       	mul	r23, r20
     a2c:	33 27       	eor	r19, r19
     a2e:	a0 0d       	add	r26, r0
     a30:	61 1d       	adc	r22, r1
     a32:	23 1f       	adc	r18, r19
     a34:	84 9f       	mul	r24, r20
     a36:	60 0d       	add	r22, r0
     a38:	21 1d       	adc	r18, r1
     a3a:	82 2f       	mov	r24, r18
     a3c:	76 2f       	mov	r23, r22
     a3e:	6a 2f       	mov	r22, r26
     a40:	11 24       	eor	r1, r1
     a42:	9f 57       	subi	r25, 0x7F	; 127
     a44:	50 40       	sbci	r21, 0x00	; 0
     a46:	9a f0       	brmi	.+38     	; 0xa6e <__mulsf3_pse+0x88>
     a48:	f1 f0       	breq	.+60     	; 0xa86 <__mulsf3_pse+0xa0>
     a4a:	88 23       	and	r24, r24
     a4c:	4a f0       	brmi	.+18     	; 0xa60 <__mulsf3_pse+0x7a>
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	bb 1f       	adc	r27, r27
     a54:	66 1f       	adc	r22, r22
     a56:	77 1f       	adc	r23, r23
     a58:	88 1f       	adc	r24, r24
     a5a:	91 50       	subi	r25, 0x01	; 1
     a5c:	50 40       	sbci	r21, 0x00	; 0
     a5e:	a9 f7       	brne	.-22     	; 0xa4a <__mulsf3_pse+0x64>
     a60:	9e 3f       	cpi	r25, 0xFE	; 254
     a62:	51 05       	cpc	r21, r1
     a64:	80 f0       	brcs	.+32     	; 0xa86 <__mulsf3_pse+0xa0>
     a66:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_inf>
     a6a:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__fp_szero>
     a6e:	5f 3f       	cpi	r21, 0xFF	; 255
     a70:	e4 f3       	brlt	.-8      	; 0xa6a <__mulsf3_pse+0x84>
     a72:	98 3e       	cpi	r25, 0xE8	; 232
     a74:	d4 f3       	brlt	.-12     	; 0xa6a <__mulsf3_pse+0x84>
     a76:	86 95       	lsr	r24
     a78:	77 95       	ror	r23
     a7a:	67 95       	ror	r22
     a7c:	b7 95       	ror	r27
     a7e:	f7 95       	ror	r31
     a80:	e7 95       	ror	r30
     a82:	9f 5f       	subi	r25, 0xFF	; 255
     a84:	c1 f7       	brne	.-16     	; 0xa76 <__mulsf3_pse+0x90>
     a86:	fe 2b       	or	r31, r30
     a88:	88 0f       	add	r24, r24
     a8a:	91 1d       	adc	r25, r1
     a8c:	96 95       	lsr	r25
     a8e:	87 95       	ror	r24
     a90:	97 f9       	bld	r25, 7
     a92:	08 95       	ret

00000a94 <__divmodhi4>:
     a94:	97 fb       	bst	r25, 7
     a96:	07 2e       	mov	r0, r23
     a98:	16 f4       	brtc	.+4      	; 0xa9e <__divmodhi4+0xa>
     a9a:	00 94       	com	r0
     a9c:	07 d0       	rcall	.+14     	; 0xaac <__divmodhi4_neg1>
     a9e:	77 fd       	sbrc	r23, 7
     aa0:	09 d0       	rcall	.+18     	; 0xab4 <__divmodhi4_neg2>
     aa2:	0e 94 5e 05 	call	0xabc	; 0xabc <__udivmodhi4>
     aa6:	07 fc       	sbrc	r0, 7
     aa8:	05 d0       	rcall	.+10     	; 0xab4 <__divmodhi4_neg2>
     aaa:	3e f4       	brtc	.+14     	; 0xaba <__divmodhi4_exit>

00000aac <__divmodhi4_neg1>:
     aac:	90 95       	com	r25
     aae:	81 95       	neg	r24
     ab0:	9f 4f       	sbci	r25, 0xFF	; 255
     ab2:	08 95       	ret

00000ab4 <__divmodhi4_neg2>:
     ab4:	70 95       	com	r23
     ab6:	61 95       	neg	r22
     ab8:	7f 4f       	sbci	r23, 0xFF	; 255

00000aba <__divmodhi4_exit>:
     aba:	08 95       	ret

00000abc <__udivmodhi4>:
     abc:	aa 1b       	sub	r26, r26
     abe:	bb 1b       	sub	r27, r27
     ac0:	51 e1       	ldi	r21, 0x11	; 17
     ac2:	07 c0       	rjmp	.+14     	; 0xad2 <__udivmodhi4_ep>

00000ac4 <__udivmodhi4_loop>:
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	a6 17       	cp	r26, r22
     aca:	b7 07       	cpc	r27, r23
     acc:	10 f0       	brcs	.+4      	; 0xad2 <__udivmodhi4_ep>
     ace:	a6 1b       	sub	r26, r22
     ad0:	b7 0b       	sbc	r27, r23

00000ad2 <__udivmodhi4_ep>:
     ad2:	88 1f       	adc	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	5a 95       	dec	r21
     ad8:	a9 f7       	brne	.-22     	; 0xac4 <__udivmodhi4_loop>
     ada:	80 95       	com	r24
     adc:	90 95       	com	r25
     ade:	bc 01       	movw	r22, r24
     ae0:	cd 01       	movw	r24, r26
     ae2:	08 95       	ret

00000ae4 <sprintf>:
     ae4:	ae e0       	ldi	r26, 0x0E	; 14
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	e8 e7       	ldi	r30, 0x78	; 120
     aea:	f5 e0       	ldi	r31, 0x05	; 5
     aec:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__prologue_saves__+0x1c>
     af0:	0d 89       	ldd	r16, Y+21	; 0x15
     af2:	1e 89       	ldd	r17, Y+22	; 0x16
     af4:	86 e0       	ldi	r24, 0x06	; 6
     af6:	8c 83       	std	Y+4, r24	; 0x04
     af8:	1a 83       	std	Y+2, r17	; 0x02
     afa:	09 83       	std	Y+1, r16	; 0x01
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	9f e7       	ldi	r25, 0x7F	; 127
     b00:	9e 83       	std	Y+6, r25	; 0x06
     b02:	8d 83       	std	Y+5, r24	; 0x05
     b04:	ae 01       	movw	r20, r28
     b06:	47 5e       	subi	r20, 0xE7	; 231
     b08:	5f 4f       	sbci	r21, 0xFF	; 255
     b0a:	6f 89       	ldd	r22, Y+23	; 0x17
     b0c:	78 8d       	ldd	r23, Y+24	; 0x18
     b0e:	ce 01       	movw	r24, r28
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	0e 94 95 05 	call	0xb2a	; 0xb2a <vfprintf>
     b16:	2f 81       	ldd	r18, Y+7	; 0x07
     b18:	38 85       	ldd	r19, Y+8	; 0x08
     b1a:	f8 01       	movw	r30, r16
     b1c:	e2 0f       	add	r30, r18
     b1e:	f3 1f       	adc	r31, r19
     b20:	10 82       	st	Z, r1
     b22:	2e 96       	adiw	r28, 0x0e	; 14
     b24:	e4 e0       	ldi	r30, 0x04	; 4
     b26:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__epilogue_restores__+0x1c>

00000b2a <vfprintf>:
     b2a:	ac e0       	ldi	r26, 0x0C	; 12
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	eb e9       	ldi	r30, 0x9B	; 155
     b30:	f5 e0       	ldi	r31, 0x05	; 5
     b32:	0c 94 13 08 	jmp	0x1026	; 0x1026 <__prologue_saves__>
     b36:	7c 01       	movw	r14, r24
     b38:	6b 01       	movw	r12, r22
     b3a:	8a 01       	movw	r16, r20
     b3c:	fc 01       	movw	r30, r24
     b3e:	17 82       	std	Z+7, r1	; 0x07
     b40:	16 82       	std	Z+6, r1	; 0x06
     b42:	83 81       	ldd	r24, Z+3	; 0x03
     b44:	81 ff       	sbrs	r24, 1
     b46:	bd c1       	rjmp	.+890    	; 0xec2 <vfprintf+0x398>
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	4c 01       	movw	r8, r24
     b4e:	f7 01       	movw	r30, r14
     b50:	93 81       	ldd	r25, Z+3	; 0x03
     b52:	f6 01       	movw	r30, r12
     b54:	93 fd       	sbrc	r25, 3
     b56:	85 91       	lpm	r24, Z+
     b58:	93 ff       	sbrs	r25, 3
     b5a:	81 91       	ld	r24, Z+
     b5c:	6f 01       	movw	r12, r30
     b5e:	88 23       	and	r24, r24
     b60:	09 f4       	brne	.+2      	; 0xb64 <vfprintf+0x3a>
     b62:	ab c1       	rjmp	.+854    	; 0xeba <vfprintf+0x390>
     b64:	85 32       	cpi	r24, 0x25	; 37
     b66:	39 f4       	brne	.+14     	; 0xb76 <vfprintf+0x4c>
     b68:	93 fd       	sbrc	r25, 3
     b6a:	85 91       	lpm	r24, Z+
     b6c:	93 ff       	sbrs	r25, 3
     b6e:	81 91       	ld	r24, Z+
     b70:	6f 01       	movw	r12, r30
     b72:	85 32       	cpi	r24, 0x25	; 37
     b74:	29 f4       	brne	.+10     	; 0xb80 <vfprintf+0x56>
     b76:	b7 01       	movw	r22, r14
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 7d 07 	call	0xefa	; 0xefa <fputc>
     b7e:	e7 cf       	rjmp	.-50     	; 0xb4e <vfprintf+0x24>
     b80:	51 2c       	mov	r5, r1
     b82:	31 2c       	mov	r3, r1
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	20 32       	cpi	r18, 0x20	; 32
     b88:	a0 f4       	brcc	.+40     	; 0xbb2 <vfprintf+0x88>
     b8a:	8b 32       	cpi	r24, 0x2B	; 43
     b8c:	69 f0       	breq	.+26     	; 0xba8 <vfprintf+0x7e>
     b8e:	30 f4       	brcc	.+12     	; 0xb9c <vfprintf+0x72>
     b90:	80 32       	cpi	r24, 0x20	; 32
     b92:	59 f0       	breq	.+22     	; 0xbaa <vfprintf+0x80>
     b94:	83 32       	cpi	r24, 0x23	; 35
     b96:	69 f4       	brne	.+26     	; 0xbb2 <vfprintf+0x88>
     b98:	20 61       	ori	r18, 0x10	; 16
     b9a:	2c c0       	rjmp	.+88     	; 0xbf4 <vfprintf+0xca>
     b9c:	8d 32       	cpi	r24, 0x2D	; 45
     b9e:	39 f0       	breq	.+14     	; 0xbae <vfprintf+0x84>
     ba0:	80 33       	cpi	r24, 0x30	; 48
     ba2:	39 f4       	brne	.+14     	; 0xbb2 <vfprintf+0x88>
     ba4:	21 60       	ori	r18, 0x01	; 1
     ba6:	26 c0       	rjmp	.+76     	; 0xbf4 <vfprintf+0xca>
     ba8:	22 60       	ori	r18, 0x02	; 2
     baa:	24 60       	ori	r18, 0x04	; 4
     bac:	23 c0       	rjmp	.+70     	; 0xbf4 <vfprintf+0xca>
     bae:	28 60       	ori	r18, 0x08	; 8
     bb0:	21 c0       	rjmp	.+66     	; 0xbf4 <vfprintf+0xca>
     bb2:	27 fd       	sbrc	r18, 7
     bb4:	27 c0       	rjmp	.+78     	; 0xc04 <vfprintf+0xda>
     bb6:	30 ed       	ldi	r19, 0xD0	; 208
     bb8:	38 0f       	add	r19, r24
     bba:	3a 30       	cpi	r19, 0x0A	; 10
     bbc:	78 f4       	brcc	.+30     	; 0xbdc <vfprintf+0xb2>
     bbe:	26 ff       	sbrs	r18, 6
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <vfprintf+0xa4>
     bc2:	fa e0       	ldi	r31, 0x0A	; 10
     bc4:	5f 9e       	mul	r5, r31
     bc6:	30 0d       	add	r19, r0
     bc8:	11 24       	eor	r1, r1
     bca:	53 2e       	mov	r5, r19
     bcc:	13 c0       	rjmp	.+38     	; 0xbf4 <vfprintf+0xca>
     bce:	8a e0       	ldi	r24, 0x0A	; 10
     bd0:	38 9e       	mul	r3, r24
     bd2:	30 0d       	add	r19, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	33 2e       	mov	r3, r19
     bd8:	20 62       	ori	r18, 0x20	; 32
     bda:	0c c0       	rjmp	.+24     	; 0xbf4 <vfprintf+0xca>
     bdc:	8e 32       	cpi	r24, 0x2E	; 46
     bde:	21 f4       	brne	.+8      	; 0xbe8 <vfprintf+0xbe>
     be0:	26 fd       	sbrc	r18, 6
     be2:	6b c1       	rjmp	.+726    	; 0xeba <vfprintf+0x390>
     be4:	20 64       	ori	r18, 0x40	; 64
     be6:	06 c0       	rjmp	.+12     	; 0xbf4 <vfprintf+0xca>
     be8:	8c 36       	cpi	r24, 0x6C	; 108
     bea:	11 f4       	brne	.+4      	; 0xbf0 <vfprintf+0xc6>
     bec:	20 68       	ori	r18, 0x80	; 128
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <vfprintf+0xca>
     bf0:	88 36       	cpi	r24, 0x68	; 104
     bf2:	41 f4       	brne	.+16     	; 0xc04 <vfprintf+0xda>
     bf4:	f6 01       	movw	r30, r12
     bf6:	93 fd       	sbrc	r25, 3
     bf8:	85 91       	lpm	r24, Z+
     bfa:	93 ff       	sbrs	r25, 3
     bfc:	81 91       	ld	r24, Z+
     bfe:	6f 01       	movw	r12, r30
     c00:	81 11       	cpse	r24, r1
     c02:	c1 cf       	rjmp	.-126    	; 0xb86 <vfprintf+0x5c>
     c04:	98 2f       	mov	r25, r24
     c06:	9f 7d       	andi	r25, 0xDF	; 223
     c08:	95 54       	subi	r25, 0x45	; 69
     c0a:	93 30       	cpi	r25, 0x03	; 3
     c0c:	28 f4       	brcc	.+10     	; 0xc18 <vfprintf+0xee>
     c0e:	0c 5f       	subi	r16, 0xFC	; 252
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
     c12:	ff e3       	ldi	r31, 0x3F	; 63
     c14:	f9 83       	std	Y+1, r31	; 0x01
     c16:	0d c0       	rjmp	.+26     	; 0xc32 <vfprintf+0x108>
     c18:	83 36       	cpi	r24, 0x63	; 99
     c1a:	31 f0       	breq	.+12     	; 0xc28 <vfprintf+0xfe>
     c1c:	83 37       	cpi	r24, 0x73	; 115
     c1e:	71 f0       	breq	.+28     	; 0xc3c <vfprintf+0x112>
     c20:	83 35       	cpi	r24, 0x53	; 83
     c22:	09 f0       	breq	.+2      	; 0xc26 <vfprintf+0xfc>
     c24:	5b c0       	rjmp	.+182    	; 0xcdc <vfprintf+0x1b2>
     c26:	22 c0       	rjmp	.+68     	; 0xc6c <vfprintf+0x142>
     c28:	f8 01       	movw	r30, r16
     c2a:	80 81       	ld	r24, Z
     c2c:	89 83       	std	Y+1, r24	; 0x01
     c2e:	0e 5f       	subi	r16, 0xFE	; 254
     c30:	1f 4f       	sbci	r17, 0xFF	; 255
     c32:	44 24       	eor	r4, r4
     c34:	43 94       	inc	r4
     c36:	51 2c       	mov	r5, r1
     c38:	54 01       	movw	r10, r8
     c3a:	15 c0       	rjmp	.+42     	; 0xc66 <vfprintf+0x13c>
     c3c:	38 01       	movw	r6, r16
     c3e:	f2 e0       	ldi	r31, 0x02	; 2
     c40:	6f 0e       	add	r6, r31
     c42:	71 1c       	adc	r7, r1
     c44:	f8 01       	movw	r30, r16
     c46:	a0 80       	ld	r10, Z
     c48:	b1 80       	ldd	r11, Z+1	; 0x01
     c4a:	26 ff       	sbrs	r18, 6
     c4c:	03 c0       	rjmp	.+6      	; 0xc54 <vfprintf+0x12a>
     c4e:	65 2d       	mov	r22, r5
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <vfprintf+0x12e>
     c54:	6f ef       	ldi	r22, 0xFF	; 255
     c56:	7f ef       	ldi	r23, 0xFF	; 255
     c58:	c5 01       	movw	r24, r10
     c5a:	2c 87       	std	Y+12, r18	; 0x0c
     c5c:	0e 94 72 07 	call	0xee4	; 0xee4 <strnlen>
     c60:	2c 01       	movw	r4, r24
     c62:	83 01       	movw	r16, r6
     c64:	2c 85       	ldd	r18, Y+12	; 0x0c
     c66:	2f 77       	andi	r18, 0x7F	; 127
     c68:	22 2e       	mov	r2, r18
     c6a:	17 c0       	rjmp	.+46     	; 0xc9a <vfprintf+0x170>
     c6c:	38 01       	movw	r6, r16
     c6e:	f2 e0       	ldi	r31, 0x02	; 2
     c70:	6f 0e       	add	r6, r31
     c72:	71 1c       	adc	r7, r1
     c74:	f8 01       	movw	r30, r16
     c76:	a0 80       	ld	r10, Z
     c78:	b1 80       	ldd	r11, Z+1	; 0x01
     c7a:	26 ff       	sbrs	r18, 6
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <vfprintf+0x15a>
     c7e:	65 2d       	mov	r22, r5
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <vfprintf+0x15e>
     c84:	6f ef       	ldi	r22, 0xFF	; 255
     c86:	7f ef       	ldi	r23, 0xFF	; 255
     c88:	c5 01       	movw	r24, r10
     c8a:	2c 87       	std	Y+12, r18	; 0x0c
     c8c:	0e 94 67 07 	call	0xece	; 0xece <strnlen_P>
     c90:	2c 01       	movw	r4, r24
     c92:	2c 85       	ldd	r18, Y+12	; 0x0c
     c94:	20 68       	ori	r18, 0x80	; 128
     c96:	22 2e       	mov	r2, r18
     c98:	83 01       	movw	r16, r6
     c9a:	23 fc       	sbrc	r2, 3
     c9c:	1b c0       	rjmp	.+54     	; 0xcd4 <vfprintf+0x1aa>
     c9e:	83 2d       	mov	r24, r3
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	48 16       	cp	r4, r24
     ca4:	59 06       	cpc	r5, r25
     ca6:	b0 f4       	brcc	.+44     	; 0xcd4 <vfprintf+0x1aa>
     ca8:	b7 01       	movw	r22, r14
     caa:	80 e2       	ldi	r24, 0x20	; 32
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	0e 94 7d 07 	call	0xefa	; 0xefa <fputc>
     cb2:	3a 94       	dec	r3
     cb4:	f4 cf       	rjmp	.-24     	; 0xc9e <vfprintf+0x174>
     cb6:	f5 01       	movw	r30, r10
     cb8:	27 fc       	sbrc	r2, 7
     cba:	85 91       	lpm	r24, Z+
     cbc:	27 fe       	sbrs	r2, 7
     cbe:	81 91       	ld	r24, Z+
     cc0:	5f 01       	movw	r10, r30
     cc2:	b7 01       	movw	r22, r14
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 7d 07 	call	0xefa	; 0xefa <fputc>
     cca:	31 10       	cpse	r3, r1
     ccc:	3a 94       	dec	r3
     cce:	f1 e0       	ldi	r31, 0x01	; 1
     cd0:	4f 1a       	sub	r4, r31
     cd2:	51 08       	sbc	r5, r1
     cd4:	41 14       	cp	r4, r1
     cd6:	51 04       	cpc	r5, r1
     cd8:	71 f7       	brne	.-36     	; 0xcb6 <vfprintf+0x18c>
     cda:	e5 c0       	rjmp	.+458    	; 0xea6 <vfprintf+0x37c>
     cdc:	84 36       	cpi	r24, 0x64	; 100
     cde:	11 f0       	breq	.+4      	; 0xce4 <vfprintf+0x1ba>
     ce0:	89 36       	cpi	r24, 0x69	; 105
     ce2:	39 f5       	brne	.+78     	; 0xd32 <vfprintf+0x208>
     ce4:	f8 01       	movw	r30, r16
     ce6:	27 ff       	sbrs	r18, 7
     ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <vfprintf+0x1ce>
     cea:	60 81       	ld	r22, Z
     cec:	71 81       	ldd	r23, Z+1	; 0x01
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	93 81       	ldd	r25, Z+3	; 0x03
     cf2:	0c 5f       	subi	r16, 0xFC	; 252
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	08 c0       	rjmp	.+16     	; 0xd08 <vfprintf+0x1de>
     cf8:	60 81       	ld	r22, Z
     cfa:	71 81       	ldd	r23, Z+1	; 0x01
     cfc:	07 2e       	mov	r0, r23
     cfe:	00 0c       	add	r0, r0
     d00:	88 0b       	sbc	r24, r24
     d02:	99 0b       	sbc	r25, r25
     d04:	0e 5f       	subi	r16, 0xFE	; 254
     d06:	1f 4f       	sbci	r17, 0xFF	; 255
     d08:	2f 76       	andi	r18, 0x6F	; 111
     d0a:	72 2e       	mov	r7, r18
     d0c:	97 ff       	sbrs	r25, 7
     d0e:	09 c0       	rjmp	.+18     	; 0xd22 <vfprintf+0x1f8>
     d10:	90 95       	com	r25
     d12:	80 95       	com	r24
     d14:	70 95       	com	r23
     d16:	61 95       	neg	r22
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	8f 4f       	sbci	r24, 0xFF	; 255
     d1c:	9f 4f       	sbci	r25, 0xFF	; 255
     d1e:	20 68       	ori	r18, 0x80	; 128
     d20:	72 2e       	mov	r7, r18
     d22:	2a e0       	ldi	r18, 0x0A	; 10
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	a4 01       	movw	r20, r8
     d28:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__ultoa_invert>
     d2c:	a8 2e       	mov	r10, r24
     d2e:	a8 18       	sub	r10, r8
     d30:	44 c0       	rjmp	.+136    	; 0xdba <vfprintf+0x290>
     d32:	85 37       	cpi	r24, 0x75	; 117
     d34:	29 f4       	brne	.+10     	; 0xd40 <vfprintf+0x216>
     d36:	2f 7e       	andi	r18, 0xEF	; 239
     d38:	b2 2e       	mov	r11, r18
     d3a:	2a e0       	ldi	r18, 0x0A	; 10
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	25 c0       	rjmp	.+74     	; 0xd8a <vfprintf+0x260>
     d40:	f2 2f       	mov	r31, r18
     d42:	f9 7f       	andi	r31, 0xF9	; 249
     d44:	bf 2e       	mov	r11, r31
     d46:	8f 36       	cpi	r24, 0x6F	; 111
     d48:	c1 f0       	breq	.+48     	; 0xd7a <vfprintf+0x250>
     d4a:	18 f4       	brcc	.+6      	; 0xd52 <vfprintf+0x228>
     d4c:	88 35       	cpi	r24, 0x58	; 88
     d4e:	79 f0       	breq	.+30     	; 0xd6e <vfprintf+0x244>
     d50:	b4 c0       	rjmp	.+360    	; 0xeba <vfprintf+0x390>
     d52:	80 37       	cpi	r24, 0x70	; 112
     d54:	19 f0       	breq	.+6      	; 0xd5c <vfprintf+0x232>
     d56:	88 37       	cpi	r24, 0x78	; 120
     d58:	21 f0       	breq	.+8      	; 0xd62 <vfprintf+0x238>
     d5a:	af c0       	rjmp	.+350    	; 0xeba <vfprintf+0x390>
     d5c:	2f 2f       	mov	r18, r31
     d5e:	20 61       	ori	r18, 0x10	; 16
     d60:	b2 2e       	mov	r11, r18
     d62:	b4 fe       	sbrs	r11, 4
     d64:	0d c0       	rjmp	.+26     	; 0xd80 <vfprintf+0x256>
     d66:	8b 2d       	mov	r24, r11
     d68:	84 60       	ori	r24, 0x04	; 4
     d6a:	b8 2e       	mov	r11, r24
     d6c:	09 c0       	rjmp	.+18     	; 0xd80 <vfprintf+0x256>
     d6e:	24 ff       	sbrs	r18, 4
     d70:	0a c0       	rjmp	.+20     	; 0xd86 <vfprintf+0x25c>
     d72:	9f 2f       	mov	r25, r31
     d74:	96 60       	ori	r25, 0x06	; 6
     d76:	b9 2e       	mov	r11, r25
     d78:	06 c0       	rjmp	.+12     	; 0xd86 <vfprintf+0x25c>
     d7a:	28 e0       	ldi	r18, 0x08	; 8
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	05 c0       	rjmp	.+10     	; 0xd8a <vfprintf+0x260>
     d80:	20 e1       	ldi	r18, 0x10	; 16
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0x260>
     d86:	20 e1       	ldi	r18, 0x10	; 16
     d88:	32 e0       	ldi	r19, 0x02	; 2
     d8a:	f8 01       	movw	r30, r16
     d8c:	b7 fe       	sbrs	r11, 7
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <vfprintf+0x274>
     d90:	60 81       	ld	r22, Z
     d92:	71 81       	ldd	r23, Z+1	; 0x01
     d94:	82 81       	ldd	r24, Z+2	; 0x02
     d96:	93 81       	ldd	r25, Z+3	; 0x03
     d98:	0c 5f       	subi	r16, 0xFC	; 252
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	06 c0       	rjmp	.+12     	; 0xdaa <vfprintf+0x280>
     d9e:	60 81       	ld	r22, Z
     da0:	71 81       	ldd	r23, Z+1	; 0x01
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 5f       	subi	r16, 0xFE	; 254
     da8:	1f 4f       	sbci	r17, 0xFF	; 255
     daa:	a4 01       	movw	r20, r8
     dac:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__ultoa_invert>
     db0:	a8 2e       	mov	r10, r24
     db2:	a8 18       	sub	r10, r8
     db4:	fb 2d       	mov	r31, r11
     db6:	ff 77       	andi	r31, 0x7F	; 127
     db8:	7f 2e       	mov	r7, r31
     dba:	76 fe       	sbrs	r7, 6
     dbc:	0b c0       	rjmp	.+22     	; 0xdd4 <vfprintf+0x2aa>
     dbe:	37 2d       	mov	r19, r7
     dc0:	3e 7f       	andi	r19, 0xFE	; 254
     dc2:	a5 14       	cp	r10, r5
     dc4:	50 f4       	brcc	.+20     	; 0xdda <vfprintf+0x2b0>
     dc6:	74 fe       	sbrs	r7, 4
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <vfprintf+0x2b4>
     dca:	72 fc       	sbrc	r7, 2
     dcc:	08 c0       	rjmp	.+16     	; 0xdde <vfprintf+0x2b4>
     dce:	37 2d       	mov	r19, r7
     dd0:	3e 7e       	andi	r19, 0xEE	; 238
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <vfprintf+0x2b4>
     dd4:	ba 2c       	mov	r11, r10
     dd6:	37 2d       	mov	r19, r7
     dd8:	03 c0       	rjmp	.+6      	; 0xde0 <vfprintf+0x2b6>
     dda:	ba 2c       	mov	r11, r10
     ddc:	01 c0       	rjmp	.+2      	; 0xde0 <vfprintf+0x2b6>
     dde:	b5 2c       	mov	r11, r5
     de0:	34 ff       	sbrs	r19, 4
     de2:	0d c0       	rjmp	.+26     	; 0xdfe <vfprintf+0x2d4>
     de4:	fe 01       	movw	r30, r28
     de6:	ea 0d       	add	r30, r10
     de8:	f1 1d       	adc	r31, r1
     dea:	80 81       	ld	r24, Z
     dec:	80 33       	cpi	r24, 0x30	; 48
     dee:	11 f4       	brne	.+4      	; 0xdf4 <vfprintf+0x2ca>
     df0:	39 7e       	andi	r19, 0xE9	; 233
     df2:	09 c0       	rjmp	.+18     	; 0xe06 <vfprintf+0x2dc>
     df4:	32 ff       	sbrs	r19, 2
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <vfprintf+0x2da>
     df8:	b3 94       	inc	r11
     dfa:	b3 94       	inc	r11
     dfc:	04 c0       	rjmp	.+8      	; 0xe06 <vfprintf+0x2dc>
     dfe:	83 2f       	mov	r24, r19
     e00:	86 78       	andi	r24, 0x86	; 134
     e02:	09 f0       	breq	.+2      	; 0xe06 <vfprintf+0x2dc>
     e04:	b3 94       	inc	r11
     e06:	33 fd       	sbrc	r19, 3
     e08:	13 c0       	rjmp	.+38     	; 0xe30 <vfprintf+0x306>
     e0a:	30 ff       	sbrs	r19, 0
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <vfprintf+0x2f0>
     e0e:	5a 2c       	mov	r5, r10
     e10:	b3 14       	cp	r11, r3
     e12:	18 f4       	brcc	.+6      	; 0xe1a <vfprintf+0x2f0>
     e14:	53 0c       	add	r5, r3
     e16:	5b 18       	sub	r5, r11
     e18:	b3 2c       	mov	r11, r3
     e1a:	b3 14       	cp	r11, r3
     e1c:	68 f4       	brcc	.+26     	; 0xe38 <vfprintf+0x30e>
     e1e:	b7 01       	movw	r22, r14
     e20:	80 e2       	ldi	r24, 0x20	; 32
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	3c 87       	std	Y+12, r19	; 0x0c
     e26:	0e 94 7d 07 	call	0xefa	; 0xefa <fputc>
     e2a:	b3 94       	inc	r11
     e2c:	3c 85       	ldd	r19, Y+12	; 0x0c
     e2e:	f5 cf       	rjmp	.-22     	; 0xe1a <vfprintf+0x2f0>
     e30:	b3 14       	cp	r11, r3
     e32:	10 f4       	brcc	.+4      	; 0xe38 <vfprintf+0x30e>
     e34:	3b 18       	sub	r3, r11
     e36:	01 c0       	rjmp	.+2      	; 0xe3a <vfprintf+0x310>
     e38:	31 2c       	mov	r3, r1
     e3a:	34 ff       	sbrs	r19, 4
     e3c:	12 c0       	rjmp	.+36     	; 0xe62 <vfprintf+0x338>
     e3e:	b7 01       	movw	r22, r14
     e40:	80 e3       	ldi	r24, 0x30	; 48
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	3c 87       	std	Y+12, r19	; 0x0c
     e46:	0e 94 7d 07 	call	0xefa	; 0xefa <fputc>
     e4a:	3c 85       	ldd	r19, Y+12	; 0x0c
     e4c:	32 ff       	sbrs	r19, 2
     e4e:	17 c0       	rjmp	.+46     	; 0xe7e <vfprintf+0x354>
     e50:	31 fd       	sbrc	r19, 1
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <vfprintf+0x330>
     e54:	88 e7       	ldi	r24, 0x78	; 120
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <vfprintf+0x334>
     e5a:	88 e5       	ldi	r24, 0x58	; 88
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	b7 01       	movw	r22, r14
     e60:	0c c0       	rjmp	.+24     	; 0xe7a <vfprintf+0x350>
     e62:	83 2f       	mov	r24, r19
     e64:	86 78       	andi	r24, 0x86	; 134
     e66:	59 f0       	breq	.+22     	; 0xe7e <vfprintf+0x354>
     e68:	31 ff       	sbrs	r19, 1
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <vfprintf+0x346>
     e6c:	8b e2       	ldi	r24, 0x2B	; 43
     e6e:	01 c0       	rjmp	.+2      	; 0xe72 <vfprintf+0x348>
     e70:	80 e2       	ldi	r24, 0x20	; 32
     e72:	37 fd       	sbrc	r19, 7
     e74:	8d e2       	ldi	r24, 0x2D	; 45
     e76:	b7 01       	movw	r22, r14
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 7d 07 	call	0xefa	; 0xefa <fputc>
     e7e:	a5 14       	cp	r10, r5
     e80:	38 f4       	brcc	.+14     	; 0xe90 <vfprintf+0x366>
     e82:	b7 01       	movw	r22, r14
     e84:	80 e3       	ldi	r24, 0x30	; 48
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 7d 07 	call	0xefa	; 0xefa <fputc>
     e8c:	5a 94       	dec	r5
     e8e:	f7 cf       	rjmp	.-18     	; 0xe7e <vfprintf+0x354>
     e90:	aa 94       	dec	r10
     e92:	f4 01       	movw	r30, r8
     e94:	ea 0d       	add	r30, r10
     e96:	f1 1d       	adc	r31, r1
     e98:	80 81       	ld	r24, Z
     e9a:	b7 01       	movw	r22, r14
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 7d 07 	call	0xefa	; 0xefa <fputc>
     ea2:	a1 10       	cpse	r10, r1
     ea4:	f5 cf       	rjmp	.-22     	; 0xe90 <vfprintf+0x366>
     ea6:	33 20       	and	r3, r3
     ea8:	09 f4       	brne	.+2      	; 0xeac <vfprintf+0x382>
     eaa:	51 ce       	rjmp	.-862    	; 0xb4e <vfprintf+0x24>
     eac:	b7 01       	movw	r22, r14
     eae:	80 e2       	ldi	r24, 0x20	; 32
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 7d 07 	call	0xefa	; 0xefa <fputc>
     eb6:	3a 94       	dec	r3
     eb8:	f6 cf       	rjmp	.-20     	; 0xea6 <vfprintf+0x37c>
     eba:	f7 01       	movw	r30, r14
     ebc:	86 81       	ldd	r24, Z+6	; 0x06
     ebe:	97 81       	ldd	r25, Z+7	; 0x07
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <vfprintf+0x39c>
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	9f ef       	ldi	r25, 0xFF	; 255
     ec6:	2c 96       	adiw	r28, 0x0c	; 12
     ec8:	e2 e1       	ldi	r30, 0x12	; 18
     eca:	0c 94 2f 08 	jmp	0x105e	; 0x105e <__epilogue_restores__>

00000ece <strnlen_P>:
     ece:	fc 01       	movw	r30, r24
     ed0:	05 90       	lpm	r0, Z+
     ed2:	61 50       	subi	r22, 0x01	; 1
     ed4:	70 40       	sbci	r23, 0x00	; 0
     ed6:	01 10       	cpse	r0, r1
     ed8:	d8 f7       	brcc	.-10     	; 0xed0 <strnlen_P+0x2>
     eda:	80 95       	com	r24
     edc:	90 95       	com	r25
     ede:	8e 0f       	add	r24, r30
     ee0:	9f 1f       	adc	r25, r31
     ee2:	08 95       	ret

00000ee4 <strnlen>:
     ee4:	fc 01       	movw	r30, r24
     ee6:	61 50       	subi	r22, 0x01	; 1
     ee8:	70 40       	sbci	r23, 0x00	; 0
     eea:	01 90       	ld	r0, Z+
     eec:	01 10       	cpse	r0, r1
     eee:	d8 f7       	brcc	.-10     	; 0xee6 <strnlen+0x2>
     ef0:	80 95       	com	r24
     ef2:	90 95       	com	r25
     ef4:	8e 0f       	add	r24, r30
     ef6:	9f 1f       	adc	r25, r31
     ef8:	08 95       	ret

00000efa <fputc>:
     efa:	0f 93       	push	r16
     efc:	1f 93       	push	r17
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	fb 01       	movw	r30, r22
     f04:	23 81       	ldd	r18, Z+3	; 0x03
     f06:	21 fd       	sbrc	r18, 1
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <fputc+0x16>
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	9f ef       	ldi	r25, 0xFF	; 255
     f0e:	28 c0       	rjmp	.+80     	; 0xf60 <fputc+0x66>
     f10:	22 ff       	sbrs	r18, 2
     f12:	16 c0       	rjmp	.+44     	; 0xf40 <fputc+0x46>
     f14:	46 81       	ldd	r20, Z+6	; 0x06
     f16:	57 81       	ldd	r21, Z+7	; 0x07
     f18:	24 81       	ldd	r18, Z+4	; 0x04
     f1a:	35 81       	ldd	r19, Z+5	; 0x05
     f1c:	42 17       	cp	r20, r18
     f1e:	53 07       	cpc	r21, r19
     f20:	44 f4       	brge	.+16     	; 0xf32 <fputc+0x38>
     f22:	a0 81       	ld	r26, Z
     f24:	b1 81       	ldd	r27, Z+1	; 0x01
     f26:	9d 01       	movw	r18, r26
     f28:	2f 5f       	subi	r18, 0xFF	; 255
     f2a:	3f 4f       	sbci	r19, 0xFF	; 255
     f2c:	31 83       	std	Z+1, r19	; 0x01
     f2e:	20 83       	st	Z, r18
     f30:	8c 93       	st	X, r24
     f32:	26 81       	ldd	r18, Z+6	; 0x06
     f34:	37 81       	ldd	r19, Z+7	; 0x07
     f36:	2f 5f       	subi	r18, 0xFF	; 255
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	37 83       	std	Z+7, r19	; 0x07
     f3c:	26 83       	std	Z+6, r18	; 0x06
     f3e:	10 c0       	rjmp	.+32     	; 0xf60 <fputc+0x66>
     f40:	eb 01       	movw	r28, r22
     f42:	09 2f       	mov	r16, r25
     f44:	18 2f       	mov	r17, r24
     f46:	00 84       	ldd	r0, Z+8	; 0x08
     f48:	f1 85       	ldd	r31, Z+9	; 0x09
     f4a:	e0 2d       	mov	r30, r0
     f4c:	09 95       	icall
     f4e:	89 2b       	or	r24, r25
     f50:	e1 f6       	brne	.-72     	; 0xf0a <fputc+0x10>
     f52:	8e 81       	ldd	r24, Y+6	; 0x06
     f54:	9f 81       	ldd	r25, Y+7	; 0x07
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	9f 83       	std	Y+7, r25	; 0x07
     f5a:	8e 83       	std	Y+6, r24	; 0x06
     f5c:	81 2f       	mov	r24, r17
     f5e:	90 2f       	mov	r25, r16
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	08 95       	ret

00000f6a <__ultoa_invert>:
     f6a:	fa 01       	movw	r30, r20
     f6c:	aa 27       	eor	r26, r26
     f6e:	28 30       	cpi	r18, 0x08	; 8
     f70:	51 f1       	breq	.+84     	; 0xfc6 <__ultoa_invert+0x5c>
     f72:	20 31       	cpi	r18, 0x10	; 16
     f74:	81 f1       	breq	.+96     	; 0xfd6 <__ultoa_invert+0x6c>
     f76:	e8 94       	clt
     f78:	6f 93       	push	r22
     f7a:	6e 7f       	andi	r22, 0xFE	; 254
     f7c:	6e 5f       	subi	r22, 0xFE	; 254
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8f 4f       	sbci	r24, 0xFF	; 255
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	af 4f       	sbci	r26, 0xFF	; 255
     f86:	b1 e0       	ldi	r27, 0x01	; 1
     f88:	3e d0       	rcall	.+124    	; 0x1006 <__ultoa_invert+0x9c>
     f8a:	b4 e0       	ldi	r27, 0x04	; 4
     f8c:	3c d0       	rcall	.+120    	; 0x1006 <__ultoa_invert+0x9c>
     f8e:	67 0f       	add	r22, r23
     f90:	78 1f       	adc	r23, r24
     f92:	89 1f       	adc	r24, r25
     f94:	9a 1f       	adc	r25, r26
     f96:	a1 1d       	adc	r26, r1
     f98:	68 0f       	add	r22, r24
     f9a:	79 1f       	adc	r23, r25
     f9c:	8a 1f       	adc	r24, r26
     f9e:	91 1d       	adc	r25, r1
     fa0:	a1 1d       	adc	r26, r1
     fa2:	6a 0f       	add	r22, r26
     fa4:	71 1d       	adc	r23, r1
     fa6:	81 1d       	adc	r24, r1
     fa8:	91 1d       	adc	r25, r1
     faa:	a1 1d       	adc	r26, r1
     fac:	20 d0       	rcall	.+64     	; 0xfee <__ultoa_invert+0x84>
     fae:	09 f4       	brne	.+2      	; 0xfb2 <__ultoa_invert+0x48>
     fb0:	68 94       	set
     fb2:	3f 91       	pop	r19
     fb4:	2a e0       	ldi	r18, 0x0A	; 10
     fb6:	26 9f       	mul	r18, r22
     fb8:	11 24       	eor	r1, r1
     fba:	30 19       	sub	r19, r0
     fbc:	30 5d       	subi	r19, 0xD0	; 208
     fbe:	31 93       	st	Z+, r19
     fc0:	de f6       	brtc	.-74     	; 0xf78 <__ultoa_invert+0xe>
     fc2:	cf 01       	movw	r24, r30
     fc4:	08 95       	ret
     fc6:	46 2f       	mov	r20, r22
     fc8:	47 70       	andi	r20, 0x07	; 7
     fca:	40 5d       	subi	r20, 0xD0	; 208
     fcc:	41 93       	st	Z+, r20
     fce:	b3 e0       	ldi	r27, 0x03	; 3
     fd0:	0f d0       	rcall	.+30     	; 0xff0 <__ultoa_invert+0x86>
     fd2:	c9 f7       	brne	.-14     	; 0xfc6 <__ultoa_invert+0x5c>
     fd4:	f6 cf       	rjmp	.-20     	; 0xfc2 <__ultoa_invert+0x58>
     fd6:	46 2f       	mov	r20, r22
     fd8:	4f 70       	andi	r20, 0x0F	; 15
     fda:	40 5d       	subi	r20, 0xD0	; 208
     fdc:	4a 33       	cpi	r20, 0x3A	; 58
     fde:	18 f0       	brcs	.+6      	; 0xfe6 <__ultoa_invert+0x7c>
     fe0:	49 5d       	subi	r20, 0xD9	; 217
     fe2:	31 fd       	sbrc	r19, 1
     fe4:	40 52       	subi	r20, 0x20	; 32
     fe6:	41 93       	st	Z+, r20
     fe8:	02 d0       	rcall	.+4      	; 0xfee <__ultoa_invert+0x84>
     fea:	a9 f7       	brne	.-22     	; 0xfd6 <__ultoa_invert+0x6c>
     fec:	ea cf       	rjmp	.-44     	; 0xfc2 <__ultoa_invert+0x58>
     fee:	b4 e0       	ldi	r27, 0x04	; 4
     ff0:	a6 95       	lsr	r26
     ff2:	97 95       	ror	r25
     ff4:	87 95       	ror	r24
     ff6:	77 95       	ror	r23
     ff8:	67 95       	ror	r22
     ffa:	ba 95       	dec	r27
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <__ultoa_invert+0x86>
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	61 05       	cpc	r22, r1
    1002:	71 05       	cpc	r23, r1
    1004:	08 95       	ret
    1006:	9b 01       	movw	r18, r22
    1008:	ac 01       	movw	r20, r24
    100a:	0a 2e       	mov	r0, r26
    100c:	06 94       	lsr	r0
    100e:	57 95       	ror	r21
    1010:	47 95       	ror	r20
    1012:	37 95       	ror	r19
    1014:	27 95       	ror	r18
    1016:	ba 95       	dec	r27
    1018:	c9 f7       	brne	.-14     	; 0x100c <__ultoa_invert+0xa2>
    101a:	62 0f       	add	r22, r18
    101c:	73 1f       	adc	r23, r19
    101e:	84 1f       	adc	r24, r20
    1020:	95 1f       	adc	r25, r21
    1022:	a0 1d       	adc	r26, r0
    1024:	08 95       	ret

00001026 <__prologue_saves__>:
    1026:	2f 92       	push	r2
    1028:	3f 92       	push	r3
    102a:	4f 92       	push	r4
    102c:	5f 92       	push	r5
    102e:	6f 92       	push	r6
    1030:	7f 92       	push	r7
    1032:	8f 92       	push	r8
    1034:	9f 92       	push	r9
    1036:	af 92       	push	r10
    1038:	bf 92       	push	r11
    103a:	cf 92       	push	r12
    103c:	df 92       	push	r13
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	ca 1b       	sub	r28, r26
    1050:	db 0b       	sbc	r29, r27
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	09 94       	ijmp

0000105e <__epilogue_restores__>:
    105e:	2a 88       	ldd	r2, Y+18	; 0x12
    1060:	39 88       	ldd	r3, Y+17	; 0x11
    1062:	48 88       	ldd	r4, Y+16	; 0x10
    1064:	5f 84       	ldd	r5, Y+15	; 0x0f
    1066:	6e 84       	ldd	r6, Y+14	; 0x0e
    1068:	7d 84       	ldd	r7, Y+13	; 0x0d
    106a:	8c 84       	ldd	r8, Y+12	; 0x0c
    106c:	9b 84       	ldd	r9, Y+11	; 0x0b
    106e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1070:	b9 84       	ldd	r11, Y+9	; 0x09
    1072:	c8 84       	ldd	r12, Y+8	; 0x08
    1074:	df 80       	ldd	r13, Y+7	; 0x07
    1076:	ee 80       	ldd	r14, Y+6	; 0x06
    1078:	fd 80       	ldd	r15, Y+5	; 0x05
    107a:	0c 81       	ldd	r16, Y+4	; 0x04
    107c:	1b 81       	ldd	r17, Y+3	; 0x03
    107e:	aa 81       	ldd	r26, Y+2	; 0x02
    1080:	b9 81       	ldd	r27, Y+1	; 0x01
    1082:	ce 0f       	add	r28, r30
    1084:	d1 1d       	adc	r29, r1
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	ed 01       	movw	r28, r26
    1092:	08 95       	ret

00001094 <_exit>:
    1094:	f8 94       	cli

00001096 <__stop_program>:
    1096:	ff cf       	rjmp	.-2      	; 0x1096 <__stop_program>
