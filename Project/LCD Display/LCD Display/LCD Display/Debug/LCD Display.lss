
LCD Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e6a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000e6a  00000ede  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      0000005c  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ef  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000028b  00000000  00000000  00002247  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046a  00000000  00000000  000024d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  0000293c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  00002b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007f0  00000000  00000000  00002e97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <main>
  7a:	0c 94 33 07 	jmp	0xe66	; 0xe66 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <pinChange>:
	pinChange(D3,1);
	else
	pinChange(D3,0);
	
	if(a & 16)
	pinChange(D4,1);
  82:	67 2b       	or	r22, r23
  84:	09 f0       	breq	.+2      	; 0x88 <pinChange+0x6>
  86:	9f c0       	rjmp	.+318    	; 0x1c6 <pinChange+0x144>
  88:	00 97       	sbiw	r24, 0x00	; 0
  8a:	11 f4       	brne	.+4      	; 0x90 <pinChange+0xe>
  8c:	d8 98       	cbi	0x1b, 0	; 27
	else
	pinChange(D4,0);
  8e:	08 95       	ret
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	91 05       	cpc	r25, r1
  94:	11 f4       	brne	.+4      	; 0x9a <pinChange+0x18>
  96:	d9 98       	cbi	0x1b, 1	; 27
  98:	08 95       	ret

	if(a & 32)
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	91 05       	cpc	r25, r1
	pinChange(D5,1);
  9e:	11 f4       	brne	.+4      	; 0xa4 <pinChange+0x22>
  a0:	da 98       	cbi	0x1b, 2	; 27
  a2:	08 95       	ret
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	91 05       	cpc	r25, r1
  a8:	11 f4       	brne	.+4      	; 0xae <pinChange+0x2c>
  aa:	db 98       	cbi	0x1b, 3	; 27
	else
	pinChange(D5,0);
  ac:	08 95       	ret
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	91 05       	cpc	r25, r1
  b2:	11 f4       	brne	.+4      	; 0xb8 <pinChange+0x36>
  b4:	dc 98       	cbi	0x1b, 4	; 27
  b6:	08 95       	ret
	
	if(a & 64)
  b8:	85 30       	cpi	r24, 0x05	; 5
  ba:	91 05       	cpc	r25, r1
	pinChange(D6,1);
  bc:	11 f4       	brne	.+4      	; 0xc2 <pinChange+0x40>
  be:	dd 98       	cbi	0x1b, 5	; 27
  c0:	08 95       	ret
  c2:	86 30       	cpi	r24, 0x06	; 6
  c4:	91 05       	cpc	r25, r1
  c6:	11 f4       	brne	.+4      	; 0xcc <pinChange+0x4a>
  c8:	de 98       	cbi	0x1b, 6	; 27
	else
	pinChange(D6,0);
  ca:	08 95       	ret
  cc:	87 30       	cpi	r24, 0x07	; 7
  ce:	91 05       	cpc	r25, r1
  d0:	11 f4       	brne	.+4      	; 0xd6 <pinChange+0x54>
  d2:	df 98       	cbi	0x1b, 7	; 27
  d4:	08 95       	ret
	
	if(a & 128)
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	91 05       	cpc	r25, r1
	pinChange(D7,1);
  da:	11 f4       	brne	.+4      	; 0xe0 <pinChange+0x5e>
  dc:	c0 98       	cbi	0x18, 0	; 24
  de:	08 95       	ret
  e0:	8b 30       	cpi	r24, 0x0B	; 11
  e2:	91 05       	cpc	r25, r1
  e4:	11 f4       	brne	.+4      	; 0xea <pinChange+0x68>
  e6:	c1 98       	cbi	0x18, 1	; 24
	else
	pinChange(D7,0);
  e8:	08 95       	ret
  ea:	8c 30       	cpi	r24, 0x0C	; 12
  ec:	91 05       	cpc	r25, r1
  ee:	11 f4       	brne	.+4      	; 0xf4 <pinChange+0x72>
  f0:	c2 98       	cbi	0x18, 2	; 24
  f2:	08 95       	ret
}
  f4:	8d 30       	cpi	r24, 0x0D	; 13
  f6:	91 05       	cpc	r25, r1
		PORTB &= ~(1<<PB0);
		else if(a == eS_PORTB1)
		PORTB &= ~(1<<PB1);
		else if(a == eS_PORTB2)
		PORTB &= ~(1<<PB2);
		else if(a == eS_PORTB3)
  f8:	11 f4       	brne	.+4      	; 0xfe <pinChange+0x7c>
		PORTB &= ~(1<<PB3);
  fa:	c3 98       	cbi	0x18, 3	; 24
  fc:	08 95       	ret
		else if(a == eS_PORTB4)
  fe:	8e 30       	cpi	r24, 0x0E	; 14
 100:	91 05       	cpc	r25, r1
 102:	11 f4       	brne	.+4      	; 0x108 <pinChange+0x86>
		PORTB &= ~(1<<PB4);
 104:	c4 98       	cbi	0x18, 4	; 24
 106:	08 95       	ret
		else if(a == eS_PORTB5)
 108:	8f 30       	cpi	r24, 0x0F	; 15
 10a:	91 05       	cpc	r25, r1
 10c:	11 f4       	brne	.+4      	; 0x112 <pinChange+0x90>
		PORTB &= ~(1<<PB5);
 10e:	c5 98       	cbi	0x18, 5	; 24
 110:	08 95       	ret
		else if(a == eS_PORTB6)
 112:	80 31       	cpi	r24, 0x10	; 16
 114:	91 05       	cpc	r25, r1
 116:	11 f4       	brne	.+4      	; 0x11c <pinChange+0x9a>
		PORTB &= ~(1<<PB6);
 118:	c6 98       	cbi	0x18, 6	; 24
 11a:	08 95       	ret
		else if(a == eS_PORTB7)
 11c:	81 31       	cpi	r24, 0x11	; 17
 11e:	91 05       	cpc	r25, r1
 120:	11 f4       	brne	.+4      	; 0x126 <pinChange+0xa4>
		PORTB &= ~(1<<PB7);
 122:	c7 98       	cbi	0x18, 7	; 24
 124:	08 95       	ret
		else if(a == eS_PORTC0)
 126:	84 31       	cpi	r24, 0x14	; 20
 128:	91 05       	cpc	r25, r1
 12a:	11 f4       	brne	.+4      	; 0x130 <pinChange+0xae>
		PORTC &= ~(1<<PC0);
 12c:	a8 98       	cbi	0x15, 0	; 21
 12e:	08 95       	ret
		else if(a == eS_PORTC1)
 130:	85 31       	cpi	r24, 0x15	; 21
 132:	91 05       	cpc	r25, r1
 134:	11 f4       	brne	.+4      	; 0x13a <pinChange+0xb8>
		PORTC &= ~(1<<PC1);
 136:	a9 98       	cbi	0x15, 1	; 21
 138:	08 95       	ret
		else if(a == eS_PORTC2)
 13a:	86 31       	cpi	r24, 0x16	; 22
 13c:	91 05       	cpc	r25, r1
 13e:	11 f4       	brne	.+4      	; 0x144 <pinChange+0xc2>
		PORTC &= ~(1<<PC2);
 140:	aa 98       	cbi	0x15, 2	; 21
 142:	08 95       	ret
		else if(a == eS_PORTC3)
 144:	87 31       	cpi	r24, 0x17	; 23
 146:	91 05       	cpc	r25, r1
 148:	11 f4       	brne	.+4      	; 0x14e <pinChange+0xcc>
		PORTC &= ~(1<<PC3);
 14a:	ab 98       	cbi	0x15, 3	; 21
 14c:	08 95       	ret
		else if(a == eS_PORTC4)
 14e:	88 31       	cpi	r24, 0x18	; 24
 150:	91 05       	cpc	r25, r1
 152:	11 f4       	brne	.+4      	; 0x158 <pinChange+0xd6>
		PORTC &= ~(1<<PC4);
 154:	ac 98       	cbi	0x15, 4	; 21
 156:	08 95       	ret
		else if(a == eS_PORTC5)
 158:	89 31       	cpi	r24, 0x19	; 25
 15a:	91 05       	cpc	r25, r1
 15c:	11 f4       	brne	.+4      	; 0x162 <pinChange+0xe0>
		PORTC &= ~(1<<PC5);
 15e:	ad 98       	cbi	0x15, 5	; 21
 160:	08 95       	ret
		else if(a == eS_PORTC6)
 162:	8a 31       	cpi	r24, 0x1A	; 26
 164:	91 05       	cpc	r25, r1
 166:	11 f4       	brne	.+4      	; 0x16c <pinChange+0xea>
		PORTC &= ~(1<<PC6);
 168:	ae 98       	cbi	0x15, 6	; 21
 16a:	08 95       	ret
		else if(a == eS_PORTC7)
 16c:	8b 31       	cpi	r24, 0x1B	; 27
 16e:	91 05       	cpc	r25, r1
 170:	11 f4       	brne	.+4      	; 0x176 <pinChange+0xf4>
		PORTC &= ~(1<<PC7);
 172:	af 98       	cbi	0x15, 7	; 21
 174:	08 95       	ret
		else if(a == eS_PORTD0)
 176:	8e 31       	cpi	r24, 0x1E	; 30
 178:	91 05       	cpc	r25, r1
 17a:	11 f4       	brne	.+4      	; 0x180 <pinChange+0xfe>
		PORTD &= ~(1<<PD0);
 17c:	90 98       	cbi	0x12, 0	; 18
 17e:	08 95       	ret
		else if(a == eS_PORTD1)
 180:	8f 31       	cpi	r24, 0x1F	; 31
 182:	91 05       	cpc	r25, r1
 184:	11 f4       	brne	.+4      	; 0x18a <pinChange+0x108>
		PORTD &= ~(1<<PD1);
 186:	91 98       	cbi	0x12, 1	; 18
 188:	08 95       	ret
		else if(a == eS_PORTD2)
 18a:	80 32       	cpi	r24, 0x20	; 32
 18c:	91 05       	cpc	r25, r1
 18e:	11 f4       	brne	.+4      	; 0x194 <pinChange+0x112>
		PORTD &= ~(1<<PD2);
 190:	92 98       	cbi	0x12, 2	; 18
 192:	08 95       	ret
		else if(a == eS_PORTD3)
 194:	81 32       	cpi	r24, 0x21	; 33
 196:	91 05       	cpc	r25, r1
 198:	11 f4       	brne	.+4      	; 0x19e <pinChange+0x11c>
		PORTD &= ~(1<<PD3);
 19a:	93 98       	cbi	0x12, 3	; 18
 19c:	08 95       	ret
		else if(a == eS_PORTD4)
 19e:	82 32       	cpi	r24, 0x22	; 34
 1a0:	91 05       	cpc	r25, r1
 1a2:	11 f4       	brne	.+4      	; 0x1a8 <pinChange+0x126>
		PORTD &= ~(1<<PD4);
 1a4:	94 98       	cbi	0x12, 4	; 18
 1a6:	08 95       	ret
		else if(a == eS_PORTD5)
 1a8:	83 32       	cpi	r24, 0x23	; 35
 1aa:	91 05       	cpc	r25, r1
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <pinChange+0x130>
		PORTD &= ~(1<<PD5);
 1ae:	95 98       	cbi	0x12, 5	; 18
 1b0:	08 95       	ret
		else if(a == eS_PORTD6)
 1b2:	84 32       	cpi	r24, 0x24	; 36
 1b4:	91 05       	cpc	r25, r1
 1b6:	11 f4       	brne	.+4      	; 0x1bc <pinChange+0x13a>
		PORTD &= ~(1<<PD6);
 1b8:	96 98       	cbi	0x12, 6	; 18
 1ba:	08 95       	ret
		else if(a == eS_PORTD7)
 1bc:	85 97       	sbiw	r24, 0x25	; 37
 1be:	09 f0       	breq	.+2      	; 0x1c2 <pinChange+0x140>
 1c0:	9f c0       	rjmp	.+318    	; 0x300 <pinChange+0x27e>
		PORTD &= ~(1<<PD7);
 1c2:	97 98       	cbi	0x12, 7	; 18
 1c4:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	11 f4       	brne	.+4      	; 0x1ce <pinChange+0x14c>
		PORTA |= (1<<PA0);
 1ca:	d8 9a       	sbi	0x1b, 0	; 27
 1cc:	08 95       	ret
		else if(a == eS_PORTA1)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	91 05       	cpc	r25, r1
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <pinChange+0x156>
		PORTA |= (1<<PA1);
 1d4:	d9 9a       	sbi	0x1b, 1	; 27
 1d6:	08 95       	ret
		else if(a == eS_PORTA2)
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	91 05       	cpc	r25, r1
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <pinChange+0x160>
		PORTA |= (1<<PA2);
 1de:	da 9a       	sbi	0x1b, 2	; 27
 1e0:	08 95       	ret
		else if(a == eS_PORTA3)
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	91 05       	cpc	r25, r1
 1e6:	11 f4       	brne	.+4      	; 0x1ec <pinChange+0x16a>
		PORTA |= (1<<PA3);
 1e8:	db 9a       	sbi	0x1b, 3	; 27
 1ea:	08 95       	ret
		else if(a == eS_PORTA4)
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	91 05       	cpc	r25, r1
 1f0:	11 f4       	brne	.+4      	; 0x1f6 <pinChange+0x174>
		PORTA |= (1<<PA4);
 1f2:	dc 9a       	sbi	0x1b, 4	; 27
 1f4:	08 95       	ret
		else if(a == eS_PORTA5)
 1f6:	85 30       	cpi	r24, 0x05	; 5
 1f8:	91 05       	cpc	r25, r1
 1fa:	11 f4       	brne	.+4      	; 0x200 <pinChange+0x17e>
		PORTA |= (1<<PA5);
 1fc:	dd 9a       	sbi	0x1b, 5	; 27
 1fe:	08 95       	ret
		else if(a == eS_PORTA6)
 200:	86 30       	cpi	r24, 0x06	; 6
 202:	91 05       	cpc	r25, r1
 204:	11 f4       	brne	.+4      	; 0x20a <pinChange+0x188>
		PORTA |= (1<<PA6);
 206:	de 9a       	sbi	0x1b, 6	; 27
 208:	08 95       	ret
		else if(a == eS_PORTA7)
 20a:	87 30       	cpi	r24, 0x07	; 7
 20c:	91 05       	cpc	r25, r1
 20e:	11 f4       	brne	.+4      	; 0x214 <pinChange+0x192>
		PORTA |= (1<<PA7);
 210:	df 9a       	sbi	0x1b, 7	; 27
 212:	08 95       	ret
		else if(a == eS_PORTB0)
 214:	8a 30       	cpi	r24, 0x0A	; 10
 216:	91 05       	cpc	r25, r1
 218:	11 f4       	brne	.+4      	; 0x21e <pinChange+0x19c>
		PORTB |= (1<<PB0);
 21a:	c0 9a       	sbi	0x18, 0	; 24
 21c:	08 95       	ret
		else if(a == eS_PORTB1)
 21e:	8b 30       	cpi	r24, 0x0B	; 11
 220:	91 05       	cpc	r25, r1
 222:	11 f4       	brne	.+4      	; 0x228 <pinChange+0x1a6>
		PORTB |= (1<<PB1);
 224:	c1 9a       	sbi	0x18, 1	; 24
 226:	08 95       	ret
		else if(a == eS_PORTB2)
 228:	8c 30       	cpi	r24, 0x0C	; 12
 22a:	91 05       	cpc	r25, r1
 22c:	11 f4       	brne	.+4      	; 0x232 <pinChange+0x1b0>
		PORTB |= (1<<PB2);
 22e:	c2 9a       	sbi	0x18, 2	; 24
 230:	08 95       	ret
		else if(a == eS_PORTB3)
 232:	8d 30       	cpi	r24, 0x0D	; 13
 234:	91 05       	cpc	r25, r1
 236:	11 f4       	brne	.+4      	; 0x23c <pinChange+0x1ba>
		PORTB |= (1<<PB3);
 238:	c3 9a       	sbi	0x18, 3	; 24
 23a:	08 95       	ret
		else if(a == eS_PORTB4)
 23c:	8e 30       	cpi	r24, 0x0E	; 14
 23e:	91 05       	cpc	r25, r1
 240:	11 f4       	brne	.+4      	; 0x246 <pinChange+0x1c4>
		PORTB |= (1<<PB4);
 242:	c4 9a       	sbi	0x18, 4	; 24
 244:	08 95       	ret
		else if(a == eS_PORTB5)
 246:	8f 30       	cpi	r24, 0x0F	; 15
 248:	91 05       	cpc	r25, r1
 24a:	11 f4       	brne	.+4      	; 0x250 <pinChange+0x1ce>
		PORTB |= (1<<PB5);
 24c:	c5 9a       	sbi	0x18, 5	; 24
 24e:	08 95       	ret
		else if(a == eS_PORTB6)
 250:	80 31       	cpi	r24, 0x10	; 16
 252:	91 05       	cpc	r25, r1
 254:	11 f4       	brne	.+4      	; 0x25a <pinChange+0x1d8>
		PORTB |= (1<<PB6);
 256:	c6 9a       	sbi	0x18, 6	; 24
 258:	08 95       	ret
		else if(a == eS_PORTB7)
 25a:	81 31       	cpi	r24, 0x11	; 17
 25c:	91 05       	cpc	r25, r1
 25e:	11 f4       	brne	.+4      	; 0x264 <pinChange+0x1e2>
		PORTB |= (1<<PB7);
 260:	c7 9a       	sbi	0x18, 7	; 24
 262:	08 95       	ret
		else if(a == eS_PORTC0)
 264:	84 31       	cpi	r24, 0x14	; 20
 266:	91 05       	cpc	r25, r1
 268:	11 f4       	brne	.+4      	; 0x26e <pinChange+0x1ec>
		PORTC |= (1<<PC0);
 26a:	a8 9a       	sbi	0x15, 0	; 21
 26c:	08 95       	ret
		else if(a == eS_PORTC1)
 26e:	85 31       	cpi	r24, 0x15	; 21
 270:	91 05       	cpc	r25, r1
 272:	11 f4       	brne	.+4      	; 0x278 <pinChange+0x1f6>
		PORTC |= (1<<PC1);
 274:	a9 9a       	sbi	0x15, 1	; 21
 276:	08 95       	ret
		else if(a == eS_PORTC2)
 278:	86 31       	cpi	r24, 0x16	; 22
 27a:	91 05       	cpc	r25, r1
 27c:	11 f4       	brne	.+4      	; 0x282 <pinChange+0x200>
		PORTC |= (1<<PC2);
 27e:	aa 9a       	sbi	0x15, 2	; 21
 280:	08 95       	ret
		else if(a == eS_PORTC3)
 282:	87 31       	cpi	r24, 0x17	; 23
 284:	91 05       	cpc	r25, r1
 286:	11 f4       	brne	.+4      	; 0x28c <pinChange+0x20a>
		PORTC |= (1<<PC3);
 288:	ab 9a       	sbi	0x15, 3	; 21
 28a:	08 95       	ret
		else if(a == eS_PORTC4)
 28c:	88 31       	cpi	r24, 0x18	; 24
 28e:	91 05       	cpc	r25, r1
 290:	11 f4       	brne	.+4      	; 0x296 <pinChange+0x214>
		PORTC |= (1<<PC4);
 292:	ac 9a       	sbi	0x15, 4	; 21
 294:	08 95       	ret
		else if(a == eS_PORTC5)
 296:	89 31       	cpi	r24, 0x19	; 25
 298:	91 05       	cpc	r25, r1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <pinChange+0x21e>
		PORTC |= (1<<PC5);
 29c:	ad 9a       	sbi	0x15, 5	; 21
 29e:	08 95       	ret
		else if(a == eS_PORTC6)
 2a0:	8a 31       	cpi	r24, 0x1A	; 26
 2a2:	91 05       	cpc	r25, r1
 2a4:	11 f4       	brne	.+4      	; 0x2aa <pinChange+0x228>
		PORTC |= (1<<PC6);
 2a6:	ae 9a       	sbi	0x15, 6	; 21
 2a8:	08 95       	ret
		else if(a == eS_PORTC7)
 2aa:	8b 31       	cpi	r24, 0x1B	; 27
 2ac:	91 05       	cpc	r25, r1
 2ae:	11 f4       	brne	.+4      	; 0x2b4 <pinChange+0x232>
		PORTC |= (1<<PC7);
 2b0:	af 9a       	sbi	0x15, 7	; 21
 2b2:	08 95       	ret
		else if(a == eS_PORTD0)
 2b4:	8e 31       	cpi	r24, 0x1E	; 30
 2b6:	91 05       	cpc	r25, r1
 2b8:	11 f4       	brne	.+4      	; 0x2be <pinChange+0x23c>
		PORTD |= (1<<PD0);
 2ba:	90 9a       	sbi	0x12, 0	; 18
 2bc:	08 95       	ret
		else if(a == eS_PORTD1)
 2be:	8f 31       	cpi	r24, 0x1F	; 31
 2c0:	91 05       	cpc	r25, r1
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <pinChange+0x246>
		PORTD |= (1<<PD1);
 2c4:	91 9a       	sbi	0x12, 1	; 18
 2c6:	08 95       	ret
		else if(a == eS_PORTD2)
 2c8:	80 32       	cpi	r24, 0x20	; 32
 2ca:	91 05       	cpc	r25, r1
 2cc:	11 f4       	brne	.+4      	; 0x2d2 <pinChange+0x250>
		PORTD |= (1<<PD2);
 2ce:	92 9a       	sbi	0x12, 2	; 18
 2d0:	08 95       	ret
		else if(a == eS_PORTD3)
 2d2:	81 32       	cpi	r24, 0x21	; 33
 2d4:	91 05       	cpc	r25, r1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <pinChange+0x25a>
		PORTD |= (1<<PD3);
 2d8:	93 9a       	sbi	0x12, 3	; 18
 2da:	08 95       	ret
		else if(a == eS_PORTD4)
 2dc:	82 32       	cpi	r24, 0x22	; 34
 2de:	91 05       	cpc	r25, r1
 2e0:	11 f4       	brne	.+4      	; 0x2e6 <pinChange+0x264>
		PORTD |= (1<<PD4);
 2e2:	94 9a       	sbi	0x12, 4	; 18
 2e4:	08 95       	ret
		else if(a == eS_PORTD5)
 2e6:	83 32       	cpi	r24, 0x23	; 35
 2e8:	91 05       	cpc	r25, r1
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <pinChange+0x26e>
		PORTD |= (1<<PD5);
 2ec:	95 9a       	sbi	0x12, 5	; 18
 2ee:	08 95       	ret
		else if(a == eS_PORTD6)
 2f0:	84 32       	cpi	r24, 0x24	; 36
 2f2:	91 05       	cpc	r25, r1
 2f4:	11 f4       	brne	.+4      	; 0x2fa <pinChange+0x278>
		PORTD |= (1<<PD6);
 2f6:	96 9a       	sbi	0x12, 6	; 18
 2f8:	08 95       	ret
		else if(a == eS_PORTD7)
 2fa:	85 97       	sbiw	r24, 0x25	; 37
 2fc:	09 f4       	brne	.+2      	; 0x300 <pinChange+0x27e>
		PORTD |= (1<<PD7);
 2fe:	97 9a       	sbi	0x12, 7	; 18
 300:	08 95       	ret

00000302 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 302:	cf 93       	push	r28
 304:	c8 2f       	mov	r28, r24
	if(a & 1)
 306:	80 ff       	sbrs	r24, 0
 308:	07 c0       	rjmp	.+14     	; 0x318 <Lcd4_Port+0x16>
	pinChange(D4,1);
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	82 e2       	ldi	r24, 0x22	; 34
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 316:	06 c0       	rjmp	.+12     	; 0x324 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	82 e2       	ldi	r24, 0x22	; 34
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 2)
 324:	c1 ff       	sbrs	r28, 1
 326:	07 c0       	rjmp	.+14     	; 0x336 <Lcd4_Port+0x34>
	pinChange(D5,1);
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	83 e2       	ldi	r24, 0x23	; 35
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 334:	06 c0       	rjmp	.+12     	; 0x342 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	83 e2       	ldi	r24, 0x23	; 35
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 4)
 342:	c2 ff       	sbrs	r28, 2
 344:	07 c0       	rjmp	.+14     	; 0x354 <Lcd4_Port+0x52>
	pinChange(D6,1);
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	84 e2       	ldi	r24, 0x24	; 36
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 352:	06 c0       	rjmp	.+12     	; 0x360 <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	70 e0       	ldi	r23, 0x00	; 0
 358:	84 e2       	ldi	r24, 0x24	; 36
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 8)
 360:	c3 ff       	sbrs	r28, 3
 362:	07 c0       	rjmp	.+14     	; 0x372 <Lcd4_Port+0x70>
	pinChange(D7,1);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	85 e2       	ldi	r24, 0x25	; 37
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 370:	06 c0       	rjmp	.+12     	; 0x37e <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	85 e2       	ldi	r24, 0x25	; 37
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
}
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 382:	cf 93       	push	r28
 384:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	70 e0       	ldi	r23, 0x00	; 0
 38a:	8a e1       	ldi	r24, 0x1A	; 26
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(a);
 392:	8c 2f       	mov	r24, r28
 394:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	8b e1       	ldi	r24, 0x1B	; 27
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a4:	89 ef       	ldi	r24, 0xF9	; 249
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	01 97       	sbiw	r24, 0x01	; 1
 3aa:	f1 f7       	brne	.-4      	; 0x3a8 <Lcd4_Cmd+0x26>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <Lcd4_Cmd+0x2c>
 3ae:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	70 e0       	ldi	r23, 0x00	; 0
 3b4:	8b e1       	ldi	r24, 0x1B	; 27
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 3bc:	89 ef       	ldi	r24, 0xF9	; 249
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	01 97       	sbiw	r24, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <Lcd4_Cmd+0x3e>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <Lcd4_Cmd+0x44>
 3c6:	00 00       	nop
	_delay_ms(1);
}
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <Lcd4_Init>:
	}
}

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
 3d2:	87 e8       	ldi	r24, 0x87	; 135
 3d4:	93 e1       	ldi	r25, 0x13	; 19
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <Lcd4_Init+0xa>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <Lcd4_Init+0x10>
 3dc:	00 00       	nop
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
 3e4:	81 ee       	ldi	r24, 0xE1	; 225
 3e6:	94 e0       	ldi	r25, 0x04	; 4
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <Lcd4_Init+0x1c>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <Lcd4_Init+0x22>
 3ee:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
 3f6:	8d eb       	ldi	r24, 0xBD	; 189
 3f8:	9a e0       	ldi	r25, 0x0A	; 10
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <Lcd4_Init+0x2e>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <Lcd4_Init+0x34>
 400:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 414:	88 e0       	ldi	r24, 0x08	; 8
 416:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 420:	8c e0       	ldi	r24, 0x0C	; 12
 422:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	0e 94 c1 01 	call	0x382	; 0x382 <Lcd4_Cmd>
 432:	08 95       	ret

00000434 <Lcd4_Write_Char>:
}

void Lcd4_Write_Char(char a)
{
 434:	cf 93       	push	r28
 436:	c8 2f       	mov	r28, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	8a e1       	ldi	r24, 0x1A	; 26
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 444:	8c 2f       	mov	r24, r28
 446:	82 95       	swap	r24
 448:	8f 70       	andi	r24, 0x0F	; 15
 44a:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
	pinChange(EN,1);
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	8b e1       	ldi	r24, 0x1B	; 27
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 45a:	89 ef       	ldi	r24, 0xF9	; 249
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <Lcd4_Write_Char+0x2a>
 462:	00 c0       	rjmp	.+0      	; 0x464 <Lcd4_Write_Char+0x30>
 464:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	8b e1       	ldi	r24, 0x1B	; 27
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 472:	89 ef       	ldi	r24, 0xF9	; 249
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	01 97       	sbiw	r24, 0x01	; 1
 478:	f1 f7       	brne	.-4      	; 0x476 <Lcd4_Write_Char+0x42>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <Lcd4_Write_Char+0x48>
 47c:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(temp);
 47e:	8c 2f       	mov	r24, r28
 480:	8f 70       	andi	r24, 0x0F	; 15
 482:	0e 94 81 01 	call	0x302	; 0x302 <Lcd4_Port>
	pinChange(EN,1);
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	8b e1       	ldi	r24, 0x1B	; 27
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 492:	89 ef       	ldi	r24, 0xF9	; 249
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <Lcd4_Write_Char+0x62>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <Lcd4_Write_Char+0x68>
 49c:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	8b e1       	ldi	r24, 0x1B	; 27
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 4aa:	89 ef       	ldi	r24, 0xF9	; 249
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <Lcd4_Write_Char+0x7a>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <Lcd4_Write_Char+0x80>
 4b4:	00 00       	nop
	_delay_ms(1);
}
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	ec 01       	movw	r28, r24
	int i;
	for(i=0;a[i]!='\0';i++)
 4c0:	88 81       	ld	r24, Y
 4c2:	88 23       	and	r24, r24
 4c4:	31 f0       	breq	.+12     	; 0x4d2 <Lcd4_Write_String+0x18>
 4c6:	21 96       	adiw	r28, 0x01	; 1
	Lcd4_Write_Char(a[i]);
 4c8:	0e 94 1a 02 	call	0x434	; 0x434 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 4cc:	89 91       	ld	r24, Y+
 4ce:	81 11       	cpse	r24, r1
 4d0:	fb cf       	rjmp	.-10     	; 0x4c8 <Lcd4_Write_String+0xe>
	Lcd4_Write_Char(a[i]);
}
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <ADC_init>:
#include <util/delay.h>
#include <stdio.h>
#include "lcd.h" //Can be download from the bottom of this article

void ADC_init() {
	ADMUX |= (1 << REFS0);
 4d8:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 4da:	86 b1       	in	r24, 0x06	; 6
 4dc:	87 68       	ori	r24, 0x87	; 135
 4de:	86 b9       	out	0x06, r24	; 6
 4e0:	08 95       	ret

000004e2 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
 4e2:	97 b1       	in	r25, 0x07	; 7
 4e4:	8f 70       	andi	r24, 0x0F	; 15
 4e6:	90 7f       	andi	r25, 0xF0	; 240
 4e8:	89 2b       	or	r24, r25
 4ea:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);
 4ec:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC));
 4ee:	36 99       	sbic	0x06, 6	; 6
 4f0:	fe cf       	rjmp	.-4      	; 0x4ee <ADC_read+0xc>
	return ADC;
 4f2:	84 b1       	in	r24, 0x04	; 4
 4f4:	95 b1       	in	r25, 0x05	; 5
}
 4f6:	08 95       	ret

000004f8 <printVoltageToLcd>:

void printVoltageToLcd(float voltage){
 4f8:	8f 92       	push	r8
 4fa:	9f 92       	push	r9
 4fc:	af 92       	push	r10
 4fe:	bf 92       	push	r11
 500:	ef 92       	push	r14
 502:	ff 92       	push	r15
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	cd b7       	in	r28, 0x3d	; 61
 50e:	de b7       	in	r29, 0x3e	; 62
 510:	60 97       	sbiw	r28, 0x10	; 16
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
 51c:	4b 01       	movw	r8, r22
 51e:	5c 01       	movw	r10, r24
	char s[16];
	int intPortion = (int)voltage;
 520:	0e 94 02 03 	call	0x604	; 0x604 <__fixsfsi>
	sprintf(s, "%d", intPortion);
 524:	7f 93       	push	r23
 526:	6f 93       	push	r22
 528:	0f 2e       	mov	r0, r31
 52a:	f0 e6       	ldi	r31, 0x60	; 96
 52c:	ef 2e       	mov	r14, r31
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	ff 2e       	mov	r15, r31
 532:	f0 2d       	mov	r31, r0
 534:	ff 92       	push	r15
 536:	ef 92       	push	r14
 538:	8e 01       	movw	r16, r28
 53a:	0f 5f       	subi	r16, 0xFF	; 255
 53c:	1f 4f       	sbci	r17, 0xFF	; 255
 53e:	1f 93       	push	r17
 540:	0f 93       	push	r16
 542:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sprintf>
	Lcd4_Write_String(s);
 546:	c8 01       	movw	r24, r16
 548:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Lcd4_Write_String>
	
	Lcd4_Write_Char('.');
 54c:	8e e2       	ldi	r24, 0x2E	; 46
 54e:	0e 94 1a 02 	call	0x434	; 0x434 <Lcd4_Write_Char>
	
	int decimalPortion = ((int)(voltage * 100)) % 100;
 552:	20 e0       	ldi	r18, 0x00	; 0
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	48 ec       	ldi	r20, 0xC8	; 200
 558:	52 e4       	ldi	r21, 0x42	; 66
 55a:	c5 01       	movw	r24, r10
 55c:	b4 01       	movw	r22, r8
 55e:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3>
 562:	0e 94 02 03 	call	0x604	; 0x604 <__fixsfsi>
 566:	cb 01       	movw	r24, r22
 568:	64 e6       	ldi	r22, 0x64	; 100
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	0e 94 33 04 	call	0x866	; 0x866 <__divmodhi4>
	sprintf(s, "%d", decimalPortion);
 570:	9f 93       	push	r25
 572:	8f 93       	push	r24
 574:	ff 92       	push	r15
 576:	ef 92       	push	r14
 578:	1f 93       	push	r17
 57a:	0f 93       	push	r16
 57c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <sprintf>
	Lcd4_Write_String(s);
 580:	c8 01       	movw	r24, r16
 582:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Lcd4_Write_String>
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	f8 94       	cli
 58a:	de bf       	out	0x3e, r29	; 62
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	cd bf       	out	0x3d, r28	; 61
}
 590:	60 96       	adiw	r28, 0x10	; 16
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	f8 94       	cli
 596:	de bf       	out	0x3e, r29	; 62
 598:	0f be       	out	0x3f, r0	; 63
 59a:	cd bf       	out	0x3d, r28	; 61
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	bf 90       	pop	r11
 5aa:	af 90       	pop	r10
 5ac:	9f 90       	pop	r9
 5ae:	8f 90       	pop	r8
 5b0:	08 95       	ret

000005b2 <main>:

int main(void)
{
	DDRD = 0xFF;
 5b2:	8f ef       	ldi	r24, 0xFF	; 255
 5b4:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;
 5b6:	84 bb       	out	0x14, r24	; 20
	// int i;
	ADC_init();
 5b8:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <ADC_init>
	Lcd4_Init();
 5bc:	0e 94 e6 01 	call	0x3cc	; 0x3cc <Lcd4_Init>
	uint16_t adc_value;
	float voltage;
	while(1)
	{
		adc_value = ADC_read(0);
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <ADC_read>
 5c6:	ec 01       	movw	r28, r24
		Lcd4_Write_String("Temperature:");
 5c8:	83 e6       	ldi	r24, 0x63	; 99
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <Lcd4_Write_String>
		voltage = (float)adc_value * 5.0 / 1024.0;
 5d0:	be 01       	movw	r22, r28
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 38 03 	call	0x670	; 0x670 <__floatunsisf>
 5da:	20 e0       	ldi	r18, 0x00	; 0
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	40 ea       	ldi	r20, 0xA0	; 160
 5e0:	50 e4       	ldi	r21, 0x40	; 64
 5e2:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3>
 5e6:	20 e0       	ldi	r18, 0x00	; 0
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	40 e8       	ldi	r20, 0x80	; 128
 5ec:	5a e3       	ldi	r21, 0x3A	; 58
 5ee:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3>
		//sprintf(s, "%0.2f V", 12.5);
		voltage=voltage*60.0;
 5f2:	20 e0       	ldi	r18, 0x00	; 0
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	40 e7       	ldi	r20, 0x70	; 112
 5f8:	52 e4       	ldi	r21, 0x42	; 66
 5fa:	0e 94 9e 03 	call	0x73c	; 0x73c <__mulsf3>
		//Lcd4_Set_Cursor(1,1);
		//Lcd4_Write_String(s);
		printVoltageToLcd(voltage);
 5fe:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <printVoltageToLcd>
		Lcd4_Set_Cursor(2,1);
		Lcd4_Write_Char('e');
		Lcd4_Write_Char('S');
		_delay_ms(2000);
		*/
	}
 602:	de cf       	rjmp	.-68     	; 0x5c0 <main+0xe>

00000604 <__fixsfsi>:
 604:	0e 94 09 03 	call	0x612	; 0x612 <__fixunssfsi>
 608:	68 94       	set
 60a:	b1 11       	cpse	r27, r1
 60c:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 610:	08 95       	ret

00000612 <__fixunssfsi>:
 612:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_splitA>
 616:	88 f0       	brcs	.+34     	; 0x63a <__fixunssfsi+0x28>
 618:	9f 57       	subi	r25, 0x7F	; 127
 61a:	98 f0       	brcs	.+38     	; 0x642 <__fixunssfsi+0x30>
 61c:	b9 2f       	mov	r27, r25
 61e:	99 27       	eor	r25, r25
 620:	b7 51       	subi	r27, 0x17	; 23
 622:	b0 f0       	brcs	.+44     	; 0x650 <__fixunssfsi+0x3e>
 624:	e1 f0       	breq	.+56     	; 0x65e <__fixunssfsi+0x4c>
 626:	66 0f       	add	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	88 1f       	adc	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	1a f0       	brmi	.+6      	; 0x636 <__fixunssfsi+0x24>
 630:	ba 95       	dec	r27
 632:	c9 f7       	brne	.-14     	; 0x626 <__fixunssfsi+0x14>
 634:	14 c0       	rjmp	.+40     	; 0x65e <__fixunssfsi+0x4c>
 636:	b1 30       	cpi	r27, 0x01	; 1
 638:	91 f0       	breq	.+36     	; 0x65e <__fixunssfsi+0x4c>
 63a:	0e 94 97 03 	call	0x72e	; 0x72e <__fp_zero>
 63e:	b1 e0       	ldi	r27, 0x01	; 1
 640:	08 95       	ret
 642:	0c 94 97 03 	jmp	0x72e	; 0x72e <__fp_zero>
 646:	67 2f       	mov	r22, r23
 648:	78 2f       	mov	r23, r24
 64a:	88 27       	eor	r24, r24
 64c:	b8 5f       	subi	r27, 0xF8	; 248
 64e:	39 f0       	breq	.+14     	; 0x65e <__fixunssfsi+0x4c>
 650:	b9 3f       	cpi	r27, 0xF9	; 249
 652:	cc f3       	brlt	.-14     	; 0x646 <__fixunssfsi+0x34>
 654:	86 95       	lsr	r24
 656:	77 95       	ror	r23
 658:	67 95       	ror	r22
 65a:	b3 95       	inc	r27
 65c:	d9 f7       	brne	.-10     	; 0x654 <__fixunssfsi+0x42>
 65e:	3e f4       	brtc	.+14     	; 0x66e <__fixunssfsi+0x5c>
 660:	90 95       	com	r25
 662:	80 95       	com	r24
 664:	70 95       	com	r23
 666:	61 95       	neg	r22
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	8f 4f       	sbci	r24, 0xFF	; 255
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	08 95       	ret

00000670 <__floatunsisf>:
 670:	e8 94       	clt
 672:	09 c0       	rjmp	.+18     	; 0x686 <__floatsisf+0x12>

00000674 <__floatsisf>:
 674:	97 fb       	bst	r25, 7
 676:	3e f4       	brtc	.+14     	; 0x686 <__floatsisf+0x12>
 678:	90 95       	com	r25
 67a:	80 95       	com	r24
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	99 23       	and	r25, r25
 688:	a9 f0       	breq	.+42     	; 0x6b4 <__floatsisf+0x40>
 68a:	f9 2f       	mov	r31, r25
 68c:	96 e9       	ldi	r25, 0x96	; 150
 68e:	bb 27       	eor	r27, r27
 690:	93 95       	inc	r25
 692:	f6 95       	lsr	r31
 694:	87 95       	ror	r24
 696:	77 95       	ror	r23
 698:	67 95       	ror	r22
 69a:	b7 95       	ror	r27
 69c:	f1 11       	cpse	r31, r1
 69e:	f8 cf       	rjmp	.-16     	; 0x690 <__floatsisf+0x1c>
 6a0:	fa f4       	brpl	.+62     	; 0x6e0 <__floatsisf+0x6c>
 6a2:	bb 0f       	add	r27, r27
 6a4:	11 f4       	brne	.+4      	; 0x6aa <__floatsisf+0x36>
 6a6:	60 ff       	sbrs	r22, 0
 6a8:	1b c0       	rjmp	.+54     	; 0x6e0 <__floatsisf+0x6c>
 6aa:	6f 5f       	subi	r22, 0xFF	; 255
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	8f 4f       	sbci	r24, 0xFF	; 255
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	16 c0       	rjmp	.+44     	; 0x6e0 <__floatsisf+0x6c>
 6b4:	88 23       	and	r24, r24
 6b6:	11 f0       	breq	.+4      	; 0x6bc <__floatsisf+0x48>
 6b8:	96 e9       	ldi	r25, 0x96	; 150
 6ba:	11 c0       	rjmp	.+34     	; 0x6de <__floatsisf+0x6a>
 6bc:	77 23       	and	r23, r23
 6be:	21 f0       	breq	.+8      	; 0x6c8 <__floatsisf+0x54>
 6c0:	9e e8       	ldi	r25, 0x8E	; 142
 6c2:	87 2f       	mov	r24, r23
 6c4:	76 2f       	mov	r23, r22
 6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <__floatsisf+0x5e>
 6c8:	66 23       	and	r22, r22
 6ca:	71 f0       	breq	.+28     	; 0x6e8 <__floatsisf+0x74>
 6cc:	96 e8       	ldi	r25, 0x86	; 134
 6ce:	86 2f       	mov	r24, r22
 6d0:	70 e0       	ldi	r23, 0x00	; 0
 6d2:	60 e0       	ldi	r22, 0x00	; 0
 6d4:	2a f0       	brmi	.+10     	; 0x6e0 <__floatsisf+0x6c>
 6d6:	9a 95       	dec	r25
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	da f7       	brpl	.-10     	; 0x6d6 <__floatsisf+0x62>
 6e0:	88 0f       	add	r24, r24
 6e2:	96 95       	lsr	r25
 6e4:	87 95       	ror	r24
 6e6:	97 f9       	bld	r25, 7
 6e8:	08 95       	ret

000006ea <__fp_split3>:
 6ea:	57 fd       	sbrc	r21, 7
 6ec:	90 58       	subi	r25, 0x80	; 128
 6ee:	44 0f       	add	r20, r20
 6f0:	55 1f       	adc	r21, r21
 6f2:	59 f0       	breq	.+22     	; 0x70a <__fp_splitA+0x10>
 6f4:	5f 3f       	cpi	r21, 0xFF	; 255
 6f6:	71 f0       	breq	.+28     	; 0x714 <__fp_splitA+0x1a>
 6f8:	47 95       	ror	r20

000006fa <__fp_splitA>:
 6fa:	88 0f       	add	r24, r24
 6fc:	97 fb       	bst	r25, 7
 6fe:	99 1f       	adc	r25, r25
 700:	61 f0       	breq	.+24     	; 0x71a <__fp_splitA+0x20>
 702:	9f 3f       	cpi	r25, 0xFF	; 255
 704:	79 f0       	breq	.+30     	; 0x724 <__fp_splitA+0x2a>
 706:	87 95       	ror	r24
 708:	08 95       	ret
 70a:	12 16       	cp	r1, r18
 70c:	13 06       	cpc	r1, r19
 70e:	14 06       	cpc	r1, r20
 710:	55 1f       	adc	r21, r21
 712:	f2 cf       	rjmp	.-28     	; 0x6f8 <__fp_split3+0xe>
 714:	46 95       	lsr	r20
 716:	f1 df       	rcall	.-30     	; 0x6fa <__fp_splitA>
 718:	08 c0       	rjmp	.+16     	; 0x72a <__fp_splitA+0x30>
 71a:	16 16       	cp	r1, r22
 71c:	17 06       	cpc	r1, r23
 71e:	18 06       	cpc	r1, r24
 720:	99 1f       	adc	r25, r25
 722:	f1 cf       	rjmp	.-30     	; 0x706 <__fp_splitA+0xc>
 724:	86 95       	lsr	r24
 726:	71 05       	cpc	r23, r1
 728:	61 05       	cpc	r22, r1
 72a:	08 94       	sec
 72c:	08 95       	ret

0000072e <__fp_zero>:
 72e:	e8 94       	clt

00000730 <__fp_szero>:
 730:	bb 27       	eor	r27, r27
 732:	66 27       	eor	r22, r22
 734:	77 27       	eor	r23, r23
 736:	cb 01       	movw	r24, r22
 738:	97 f9       	bld	r25, 7
 73a:	08 95       	ret

0000073c <__mulsf3>:
 73c:	0e 94 b1 03 	call	0x762	; 0x762 <__mulsf3x>
 740:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_round>
 744:	0e 94 14 04 	call	0x828	; 0x828 <__fp_pscA>
 748:	38 f0       	brcs	.+14     	; 0x758 <__mulsf3+0x1c>
 74a:	0e 94 1b 04 	call	0x836	; 0x836 <__fp_pscB>
 74e:	20 f0       	brcs	.+8      	; 0x758 <__mulsf3+0x1c>
 750:	95 23       	and	r25, r21
 752:	11 f0       	breq	.+4      	; 0x758 <__mulsf3+0x1c>
 754:	0c 94 0b 04 	jmp	0x816	; 0x816 <__fp_inf>
 758:	0c 94 11 04 	jmp	0x822	; 0x822 <__fp_nan>
 75c:	11 24       	eor	r1, r1
 75e:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>

00000762 <__mulsf3x>:
 762:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_split3>
 766:	70 f3       	brcs	.-36     	; 0x744 <__mulsf3+0x8>

00000768 <__mulsf3_pse>:
 768:	95 9f       	mul	r25, r21
 76a:	c1 f3       	breq	.-16     	; 0x75c <__mulsf3+0x20>
 76c:	95 0f       	add	r25, r21
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	55 1f       	adc	r21, r21
 772:	62 9f       	mul	r22, r18
 774:	f0 01       	movw	r30, r0
 776:	72 9f       	mul	r23, r18
 778:	bb 27       	eor	r27, r27
 77a:	f0 0d       	add	r31, r0
 77c:	b1 1d       	adc	r27, r1
 77e:	63 9f       	mul	r22, r19
 780:	aa 27       	eor	r26, r26
 782:	f0 0d       	add	r31, r0
 784:	b1 1d       	adc	r27, r1
 786:	aa 1f       	adc	r26, r26
 788:	64 9f       	mul	r22, r20
 78a:	66 27       	eor	r22, r22
 78c:	b0 0d       	add	r27, r0
 78e:	a1 1d       	adc	r26, r1
 790:	66 1f       	adc	r22, r22
 792:	82 9f       	mul	r24, r18
 794:	22 27       	eor	r18, r18
 796:	b0 0d       	add	r27, r0
 798:	a1 1d       	adc	r26, r1
 79a:	62 1f       	adc	r22, r18
 79c:	73 9f       	mul	r23, r19
 79e:	b0 0d       	add	r27, r0
 7a0:	a1 1d       	adc	r26, r1
 7a2:	62 1f       	adc	r22, r18
 7a4:	83 9f       	mul	r24, r19
 7a6:	a0 0d       	add	r26, r0
 7a8:	61 1d       	adc	r22, r1
 7aa:	22 1f       	adc	r18, r18
 7ac:	74 9f       	mul	r23, r20
 7ae:	33 27       	eor	r19, r19
 7b0:	a0 0d       	add	r26, r0
 7b2:	61 1d       	adc	r22, r1
 7b4:	23 1f       	adc	r18, r19
 7b6:	84 9f       	mul	r24, r20
 7b8:	60 0d       	add	r22, r0
 7ba:	21 1d       	adc	r18, r1
 7bc:	82 2f       	mov	r24, r18
 7be:	76 2f       	mov	r23, r22
 7c0:	6a 2f       	mov	r22, r26
 7c2:	11 24       	eor	r1, r1
 7c4:	9f 57       	subi	r25, 0x7F	; 127
 7c6:	50 40       	sbci	r21, 0x00	; 0
 7c8:	9a f0       	brmi	.+38     	; 0x7f0 <__mulsf3_pse+0x88>
 7ca:	f1 f0       	breq	.+60     	; 0x808 <__mulsf3_pse+0xa0>
 7cc:	88 23       	and	r24, r24
 7ce:	4a f0       	brmi	.+18     	; 0x7e2 <__mulsf3_pse+0x7a>
 7d0:	ee 0f       	add	r30, r30
 7d2:	ff 1f       	adc	r31, r31
 7d4:	bb 1f       	adc	r27, r27
 7d6:	66 1f       	adc	r22, r22
 7d8:	77 1f       	adc	r23, r23
 7da:	88 1f       	adc	r24, r24
 7dc:	91 50       	subi	r25, 0x01	; 1
 7de:	50 40       	sbci	r21, 0x00	; 0
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__mulsf3_pse+0x64>
 7e2:	9e 3f       	cpi	r25, 0xFE	; 254
 7e4:	51 05       	cpc	r21, r1
 7e6:	80 f0       	brcs	.+32     	; 0x808 <__mulsf3_pse+0xa0>
 7e8:	0c 94 0b 04 	jmp	0x816	; 0x816 <__fp_inf>
 7ec:	0c 94 98 03 	jmp	0x730	; 0x730 <__fp_szero>
 7f0:	5f 3f       	cpi	r21, 0xFF	; 255
 7f2:	e4 f3       	brlt	.-8      	; 0x7ec <__mulsf3_pse+0x84>
 7f4:	98 3e       	cpi	r25, 0xE8	; 232
 7f6:	d4 f3       	brlt	.-12     	; 0x7ec <__mulsf3_pse+0x84>
 7f8:	86 95       	lsr	r24
 7fa:	77 95       	ror	r23
 7fc:	67 95       	ror	r22
 7fe:	b7 95       	ror	r27
 800:	f7 95       	ror	r31
 802:	e7 95       	ror	r30
 804:	9f 5f       	subi	r25, 0xFF	; 255
 806:	c1 f7       	brne	.-16     	; 0x7f8 <__mulsf3_pse+0x90>
 808:	fe 2b       	or	r31, r30
 80a:	88 0f       	add	r24, r24
 80c:	91 1d       	adc	r25, r1
 80e:	96 95       	lsr	r25
 810:	87 95       	ror	r24
 812:	97 f9       	bld	r25, 7
 814:	08 95       	ret

00000816 <__fp_inf>:
 816:	97 f9       	bld	r25, 7
 818:	9f 67       	ori	r25, 0x7F	; 127
 81a:	80 e8       	ldi	r24, 0x80	; 128
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	60 e0       	ldi	r22, 0x00	; 0
 820:	08 95       	ret

00000822 <__fp_nan>:
 822:	9f ef       	ldi	r25, 0xFF	; 255
 824:	80 ec       	ldi	r24, 0xC0	; 192
 826:	08 95       	ret

00000828 <__fp_pscA>:
 828:	00 24       	eor	r0, r0
 82a:	0a 94       	dec	r0
 82c:	16 16       	cp	r1, r22
 82e:	17 06       	cpc	r1, r23
 830:	18 06       	cpc	r1, r24
 832:	09 06       	cpc	r0, r25
 834:	08 95       	ret

00000836 <__fp_pscB>:
 836:	00 24       	eor	r0, r0
 838:	0a 94       	dec	r0
 83a:	12 16       	cp	r1, r18
 83c:	13 06       	cpc	r1, r19
 83e:	14 06       	cpc	r1, r20
 840:	05 06       	cpc	r0, r21
 842:	08 95       	ret

00000844 <__fp_round>:
 844:	09 2e       	mov	r0, r25
 846:	03 94       	inc	r0
 848:	00 0c       	add	r0, r0
 84a:	11 f4       	brne	.+4      	; 0x850 <__fp_round+0xc>
 84c:	88 23       	and	r24, r24
 84e:	52 f0       	brmi	.+20     	; 0x864 <__stack+0x5>
 850:	bb 0f       	add	r27, r27
 852:	40 f4       	brcc	.+16     	; 0x864 <__stack+0x5>
 854:	bf 2b       	or	r27, r31
 856:	11 f4       	brne	.+4      	; 0x85c <__fp_round+0x18>
 858:	60 ff       	sbrs	r22, 0
 85a:	04 c0       	rjmp	.+8      	; 0x864 <__stack+0x5>
 85c:	6f 5f       	subi	r22, 0xFF	; 255
 85e:	7f 4f       	sbci	r23, 0xFF	; 255
 860:	8f 4f       	sbci	r24, 0xFF	; 255
 862:	9f 4f       	sbci	r25, 0xFF	; 255
 864:	08 95       	ret

00000866 <__divmodhi4>:
 866:	97 fb       	bst	r25, 7
 868:	07 2e       	mov	r0, r23
 86a:	16 f4       	brtc	.+4      	; 0x870 <__divmodhi4+0xa>
 86c:	00 94       	com	r0
 86e:	07 d0       	rcall	.+14     	; 0x87e <__divmodhi4_neg1>
 870:	77 fd       	sbrc	r23, 7
 872:	09 d0       	rcall	.+18     	; 0x886 <__divmodhi4_neg2>
 874:	0e 94 47 04 	call	0x88e	; 0x88e <__udivmodhi4>
 878:	07 fc       	sbrc	r0, 7
 87a:	05 d0       	rcall	.+10     	; 0x886 <__divmodhi4_neg2>
 87c:	3e f4       	brtc	.+14     	; 0x88c <__divmodhi4_exit>

0000087e <__divmodhi4_neg1>:
 87e:	90 95       	com	r25
 880:	81 95       	neg	r24
 882:	9f 4f       	sbci	r25, 0xFF	; 255
 884:	08 95       	ret

00000886 <__divmodhi4_neg2>:
 886:	70 95       	com	r23
 888:	61 95       	neg	r22
 88a:	7f 4f       	sbci	r23, 0xFF	; 255

0000088c <__divmodhi4_exit>:
 88c:	08 95       	ret

0000088e <__udivmodhi4>:
 88e:	aa 1b       	sub	r26, r26
 890:	bb 1b       	sub	r27, r27
 892:	51 e1       	ldi	r21, 0x11	; 17
 894:	07 c0       	rjmp	.+14     	; 0x8a4 <__udivmodhi4_ep>

00000896 <__udivmodhi4_loop>:
 896:	aa 1f       	adc	r26, r26
 898:	bb 1f       	adc	r27, r27
 89a:	a6 17       	cp	r26, r22
 89c:	b7 07       	cpc	r27, r23
 89e:	10 f0       	brcs	.+4      	; 0x8a4 <__udivmodhi4_ep>
 8a0:	a6 1b       	sub	r26, r22
 8a2:	b7 0b       	sbc	r27, r23

000008a4 <__udivmodhi4_ep>:
 8a4:	88 1f       	adc	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	5a 95       	dec	r21
 8aa:	a9 f7       	brne	.-22     	; 0x896 <__udivmodhi4_loop>
 8ac:	80 95       	com	r24
 8ae:	90 95       	com	r25
 8b0:	bc 01       	movw	r22, r24
 8b2:	cd 01       	movw	r24, r26
 8b4:	08 95       	ret

000008b6 <sprintf>:
 8b6:	ae e0       	ldi	r26, 0x0E	; 14
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	e1 e6       	ldi	r30, 0x61	; 97
 8bc:	f4 e0       	ldi	r31, 0x04	; 4
 8be:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__prologue_saves__+0x1c>
 8c2:	0d 89       	ldd	r16, Y+21	; 0x15
 8c4:	1e 89       	ldd	r17, Y+22	; 0x16
 8c6:	86 e0       	ldi	r24, 0x06	; 6
 8c8:	8c 83       	std	Y+4, r24	; 0x04
 8ca:	1a 83       	std	Y+2, r17	; 0x02
 8cc:	09 83       	std	Y+1, r16	; 0x01
 8ce:	8f ef       	ldi	r24, 0xFF	; 255
 8d0:	9f e7       	ldi	r25, 0x7F	; 127
 8d2:	9e 83       	std	Y+6, r25	; 0x06
 8d4:	8d 83       	std	Y+5, r24	; 0x05
 8d6:	ae 01       	movw	r20, r28
 8d8:	47 5e       	subi	r20, 0xE7	; 231
 8da:	5f 4f       	sbci	r21, 0xFF	; 255
 8dc:	6f 89       	ldd	r22, Y+23	; 0x17
 8de:	78 8d       	ldd	r23, Y+24	; 0x18
 8e0:	ce 01       	movw	r24, r28
 8e2:	01 96       	adiw	r24, 0x01	; 1
 8e4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vfprintf>
 8e8:	2f 81       	ldd	r18, Y+7	; 0x07
 8ea:	38 85       	ldd	r19, Y+8	; 0x08
 8ec:	f8 01       	movw	r30, r16
 8ee:	e2 0f       	add	r30, r18
 8f0:	f3 1f       	adc	r31, r19
 8f2:	10 82       	st	Z, r1
 8f4:	2e 96       	adiw	r28, 0x0e	; 14
 8f6:	e4 e0       	ldi	r30, 0x04	; 4
 8f8:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__epilogue_restores__+0x1c>

000008fc <vfprintf>:
 8fc:	ac e0       	ldi	r26, 0x0C	; 12
 8fe:	b0 e0       	ldi	r27, 0x00	; 0
 900:	e4 e8       	ldi	r30, 0x84	; 132
 902:	f4 e0       	ldi	r31, 0x04	; 4
 904:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__prologue_saves__>
 908:	7c 01       	movw	r14, r24
 90a:	6b 01       	movw	r12, r22
 90c:	8a 01       	movw	r16, r20
 90e:	fc 01       	movw	r30, r24
 910:	17 82       	std	Z+7, r1	; 0x07
 912:	16 82       	std	Z+6, r1	; 0x06
 914:	83 81       	ldd	r24, Z+3	; 0x03
 916:	81 ff       	sbrs	r24, 1
 918:	bd c1       	rjmp	.+890    	; 0xc94 <vfprintf+0x398>
 91a:	ce 01       	movw	r24, r28
 91c:	01 96       	adiw	r24, 0x01	; 1
 91e:	4c 01       	movw	r8, r24
 920:	f7 01       	movw	r30, r14
 922:	93 81       	ldd	r25, Z+3	; 0x03
 924:	f6 01       	movw	r30, r12
 926:	93 fd       	sbrc	r25, 3
 928:	85 91       	lpm	r24, Z+
 92a:	93 ff       	sbrs	r25, 3
 92c:	81 91       	ld	r24, Z+
 92e:	6f 01       	movw	r12, r30
 930:	88 23       	and	r24, r24
 932:	09 f4       	brne	.+2      	; 0x936 <vfprintf+0x3a>
 934:	ab c1       	rjmp	.+854    	; 0xc8c <vfprintf+0x390>
 936:	85 32       	cpi	r24, 0x25	; 37
 938:	39 f4       	brne	.+14     	; 0x948 <vfprintf+0x4c>
 93a:	93 fd       	sbrc	r25, 3
 93c:	85 91       	lpm	r24, Z+
 93e:	93 ff       	sbrs	r25, 3
 940:	81 91       	ld	r24, Z+
 942:	6f 01       	movw	r12, r30
 944:	85 32       	cpi	r24, 0x25	; 37
 946:	29 f4       	brne	.+10     	; 0x952 <vfprintf+0x56>
 948:	b7 01       	movw	r22, r14
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 950:	e7 cf       	rjmp	.-50     	; 0x920 <vfprintf+0x24>
 952:	51 2c       	mov	r5, r1
 954:	31 2c       	mov	r3, r1
 956:	20 e0       	ldi	r18, 0x00	; 0
 958:	20 32       	cpi	r18, 0x20	; 32
 95a:	a0 f4       	brcc	.+40     	; 0x984 <vfprintf+0x88>
 95c:	8b 32       	cpi	r24, 0x2B	; 43
 95e:	69 f0       	breq	.+26     	; 0x97a <vfprintf+0x7e>
 960:	30 f4       	brcc	.+12     	; 0x96e <vfprintf+0x72>
 962:	80 32       	cpi	r24, 0x20	; 32
 964:	59 f0       	breq	.+22     	; 0x97c <vfprintf+0x80>
 966:	83 32       	cpi	r24, 0x23	; 35
 968:	69 f4       	brne	.+26     	; 0x984 <vfprintf+0x88>
 96a:	20 61       	ori	r18, 0x10	; 16
 96c:	2c c0       	rjmp	.+88     	; 0x9c6 <vfprintf+0xca>
 96e:	8d 32       	cpi	r24, 0x2D	; 45
 970:	39 f0       	breq	.+14     	; 0x980 <vfprintf+0x84>
 972:	80 33       	cpi	r24, 0x30	; 48
 974:	39 f4       	brne	.+14     	; 0x984 <vfprintf+0x88>
 976:	21 60       	ori	r18, 0x01	; 1
 978:	26 c0       	rjmp	.+76     	; 0x9c6 <vfprintf+0xca>
 97a:	22 60       	ori	r18, 0x02	; 2
 97c:	24 60       	ori	r18, 0x04	; 4
 97e:	23 c0       	rjmp	.+70     	; 0x9c6 <vfprintf+0xca>
 980:	28 60       	ori	r18, 0x08	; 8
 982:	21 c0       	rjmp	.+66     	; 0x9c6 <vfprintf+0xca>
 984:	27 fd       	sbrc	r18, 7
 986:	27 c0       	rjmp	.+78     	; 0x9d6 <vfprintf+0xda>
 988:	30 ed       	ldi	r19, 0xD0	; 208
 98a:	38 0f       	add	r19, r24
 98c:	3a 30       	cpi	r19, 0x0A	; 10
 98e:	78 f4       	brcc	.+30     	; 0x9ae <vfprintf+0xb2>
 990:	26 ff       	sbrs	r18, 6
 992:	06 c0       	rjmp	.+12     	; 0x9a0 <vfprintf+0xa4>
 994:	fa e0       	ldi	r31, 0x0A	; 10
 996:	5f 9e       	mul	r5, r31
 998:	30 0d       	add	r19, r0
 99a:	11 24       	eor	r1, r1
 99c:	53 2e       	mov	r5, r19
 99e:	13 c0       	rjmp	.+38     	; 0x9c6 <vfprintf+0xca>
 9a0:	8a e0       	ldi	r24, 0x0A	; 10
 9a2:	38 9e       	mul	r3, r24
 9a4:	30 0d       	add	r19, r0
 9a6:	11 24       	eor	r1, r1
 9a8:	33 2e       	mov	r3, r19
 9aa:	20 62       	ori	r18, 0x20	; 32
 9ac:	0c c0       	rjmp	.+24     	; 0x9c6 <vfprintf+0xca>
 9ae:	8e 32       	cpi	r24, 0x2E	; 46
 9b0:	21 f4       	brne	.+8      	; 0x9ba <vfprintf+0xbe>
 9b2:	26 fd       	sbrc	r18, 6
 9b4:	6b c1       	rjmp	.+726    	; 0xc8c <vfprintf+0x390>
 9b6:	20 64       	ori	r18, 0x40	; 64
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <vfprintf+0xca>
 9ba:	8c 36       	cpi	r24, 0x6C	; 108
 9bc:	11 f4       	brne	.+4      	; 0x9c2 <vfprintf+0xc6>
 9be:	20 68       	ori	r18, 0x80	; 128
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <vfprintf+0xca>
 9c2:	88 36       	cpi	r24, 0x68	; 104
 9c4:	41 f4       	brne	.+16     	; 0x9d6 <vfprintf+0xda>
 9c6:	f6 01       	movw	r30, r12
 9c8:	93 fd       	sbrc	r25, 3
 9ca:	85 91       	lpm	r24, Z+
 9cc:	93 ff       	sbrs	r25, 3
 9ce:	81 91       	ld	r24, Z+
 9d0:	6f 01       	movw	r12, r30
 9d2:	81 11       	cpse	r24, r1
 9d4:	c1 cf       	rjmp	.-126    	; 0x958 <vfprintf+0x5c>
 9d6:	98 2f       	mov	r25, r24
 9d8:	9f 7d       	andi	r25, 0xDF	; 223
 9da:	95 54       	subi	r25, 0x45	; 69
 9dc:	93 30       	cpi	r25, 0x03	; 3
 9de:	28 f4       	brcc	.+10     	; 0x9ea <vfprintf+0xee>
 9e0:	0c 5f       	subi	r16, 0xFC	; 252
 9e2:	1f 4f       	sbci	r17, 0xFF	; 255
 9e4:	ff e3       	ldi	r31, 0x3F	; 63
 9e6:	f9 83       	std	Y+1, r31	; 0x01
 9e8:	0d c0       	rjmp	.+26     	; 0xa04 <vfprintf+0x108>
 9ea:	83 36       	cpi	r24, 0x63	; 99
 9ec:	31 f0       	breq	.+12     	; 0x9fa <vfprintf+0xfe>
 9ee:	83 37       	cpi	r24, 0x73	; 115
 9f0:	71 f0       	breq	.+28     	; 0xa0e <vfprintf+0x112>
 9f2:	83 35       	cpi	r24, 0x53	; 83
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <vfprintf+0xfc>
 9f6:	5b c0       	rjmp	.+182    	; 0xaae <vfprintf+0x1b2>
 9f8:	22 c0       	rjmp	.+68     	; 0xa3e <vfprintf+0x142>
 9fa:	f8 01       	movw	r30, r16
 9fc:	80 81       	ld	r24, Z
 9fe:	89 83       	std	Y+1, r24	; 0x01
 a00:	0e 5f       	subi	r16, 0xFE	; 254
 a02:	1f 4f       	sbci	r17, 0xFF	; 255
 a04:	44 24       	eor	r4, r4
 a06:	43 94       	inc	r4
 a08:	51 2c       	mov	r5, r1
 a0a:	54 01       	movw	r10, r8
 a0c:	15 c0       	rjmp	.+42     	; 0xa38 <vfprintf+0x13c>
 a0e:	38 01       	movw	r6, r16
 a10:	f2 e0       	ldi	r31, 0x02	; 2
 a12:	6f 0e       	add	r6, r31
 a14:	71 1c       	adc	r7, r1
 a16:	f8 01       	movw	r30, r16
 a18:	a0 80       	ld	r10, Z
 a1a:	b1 80       	ldd	r11, Z+1	; 0x01
 a1c:	26 ff       	sbrs	r18, 6
 a1e:	03 c0       	rjmp	.+6      	; 0xa26 <vfprintf+0x12a>
 a20:	65 2d       	mov	r22, r5
 a22:	70 e0       	ldi	r23, 0x00	; 0
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <vfprintf+0x12e>
 a26:	6f ef       	ldi	r22, 0xFF	; 255
 a28:	7f ef       	ldi	r23, 0xFF	; 255
 a2a:	c5 01       	movw	r24, r10
 a2c:	2c 87       	std	Y+12, r18	; 0x0c
 a2e:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <strnlen>
 a32:	2c 01       	movw	r4, r24
 a34:	83 01       	movw	r16, r6
 a36:	2c 85       	ldd	r18, Y+12	; 0x0c
 a38:	2f 77       	andi	r18, 0x7F	; 127
 a3a:	22 2e       	mov	r2, r18
 a3c:	17 c0       	rjmp	.+46     	; 0xa6c <vfprintf+0x170>
 a3e:	38 01       	movw	r6, r16
 a40:	f2 e0       	ldi	r31, 0x02	; 2
 a42:	6f 0e       	add	r6, r31
 a44:	71 1c       	adc	r7, r1
 a46:	f8 01       	movw	r30, r16
 a48:	a0 80       	ld	r10, Z
 a4a:	b1 80       	ldd	r11, Z+1	; 0x01
 a4c:	26 ff       	sbrs	r18, 6
 a4e:	03 c0       	rjmp	.+6      	; 0xa56 <vfprintf+0x15a>
 a50:	65 2d       	mov	r22, r5
 a52:	70 e0       	ldi	r23, 0x00	; 0
 a54:	02 c0       	rjmp	.+4      	; 0xa5a <vfprintf+0x15e>
 a56:	6f ef       	ldi	r22, 0xFF	; 255
 a58:	7f ef       	ldi	r23, 0xFF	; 255
 a5a:	c5 01       	movw	r24, r10
 a5c:	2c 87       	std	Y+12, r18	; 0x0c
 a5e:	0e 94 50 06 	call	0xca0	; 0xca0 <strnlen_P>
 a62:	2c 01       	movw	r4, r24
 a64:	2c 85       	ldd	r18, Y+12	; 0x0c
 a66:	20 68       	ori	r18, 0x80	; 128
 a68:	22 2e       	mov	r2, r18
 a6a:	83 01       	movw	r16, r6
 a6c:	23 fc       	sbrc	r2, 3
 a6e:	1b c0       	rjmp	.+54     	; 0xaa6 <vfprintf+0x1aa>
 a70:	83 2d       	mov	r24, r3
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	48 16       	cp	r4, r24
 a76:	59 06       	cpc	r5, r25
 a78:	b0 f4       	brcc	.+44     	; 0xaa6 <vfprintf+0x1aa>
 a7a:	b7 01       	movw	r22, r14
 a7c:	80 e2       	ldi	r24, 0x20	; 32
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 a84:	3a 94       	dec	r3
 a86:	f4 cf       	rjmp	.-24     	; 0xa70 <vfprintf+0x174>
 a88:	f5 01       	movw	r30, r10
 a8a:	27 fc       	sbrc	r2, 7
 a8c:	85 91       	lpm	r24, Z+
 a8e:	27 fe       	sbrs	r2, 7
 a90:	81 91       	ld	r24, Z+
 a92:	5f 01       	movw	r10, r30
 a94:	b7 01       	movw	r22, r14
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 a9c:	31 10       	cpse	r3, r1
 a9e:	3a 94       	dec	r3
 aa0:	f1 e0       	ldi	r31, 0x01	; 1
 aa2:	4f 1a       	sub	r4, r31
 aa4:	51 08       	sbc	r5, r1
 aa6:	41 14       	cp	r4, r1
 aa8:	51 04       	cpc	r5, r1
 aaa:	71 f7       	brne	.-36     	; 0xa88 <vfprintf+0x18c>
 aac:	e5 c0       	rjmp	.+458    	; 0xc78 <vfprintf+0x37c>
 aae:	84 36       	cpi	r24, 0x64	; 100
 ab0:	11 f0       	breq	.+4      	; 0xab6 <vfprintf+0x1ba>
 ab2:	89 36       	cpi	r24, 0x69	; 105
 ab4:	39 f5       	brne	.+78     	; 0xb04 <vfprintf+0x208>
 ab6:	f8 01       	movw	r30, r16
 ab8:	27 ff       	sbrs	r18, 7
 aba:	07 c0       	rjmp	.+14     	; 0xaca <vfprintf+0x1ce>
 abc:	60 81       	ld	r22, Z
 abe:	71 81       	ldd	r23, Z+1	; 0x01
 ac0:	82 81       	ldd	r24, Z+2	; 0x02
 ac2:	93 81       	ldd	r25, Z+3	; 0x03
 ac4:	0c 5f       	subi	r16, 0xFC	; 252
 ac6:	1f 4f       	sbci	r17, 0xFF	; 255
 ac8:	08 c0       	rjmp	.+16     	; 0xada <vfprintf+0x1de>
 aca:	60 81       	ld	r22, Z
 acc:	71 81       	ldd	r23, Z+1	; 0x01
 ace:	07 2e       	mov	r0, r23
 ad0:	00 0c       	add	r0, r0
 ad2:	88 0b       	sbc	r24, r24
 ad4:	99 0b       	sbc	r25, r25
 ad6:	0e 5f       	subi	r16, 0xFE	; 254
 ad8:	1f 4f       	sbci	r17, 0xFF	; 255
 ada:	2f 76       	andi	r18, 0x6F	; 111
 adc:	72 2e       	mov	r7, r18
 ade:	97 ff       	sbrs	r25, 7
 ae0:	09 c0       	rjmp	.+18     	; 0xaf4 <vfprintf+0x1f8>
 ae2:	90 95       	com	r25
 ae4:	80 95       	com	r24
 ae6:	70 95       	com	r23
 ae8:	61 95       	neg	r22
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	8f 4f       	sbci	r24, 0xFF	; 255
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	20 68       	ori	r18, 0x80	; 128
 af2:	72 2e       	mov	r7, r18
 af4:	2a e0       	ldi	r18, 0x0A	; 10
 af6:	30 e0       	ldi	r19, 0x00	; 0
 af8:	a4 01       	movw	r20, r8
 afa:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__ultoa_invert>
 afe:	a8 2e       	mov	r10, r24
 b00:	a8 18       	sub	r10, r8
 b02:	44 c0       	rjmp	.+136    	; 0xb8c <vfprintf+0x290>
 b04:	85 37       	cpi	r24, 0x75	; 117
 b06:	29 f4       	brne	.+10     	; 0xb12 <vfprintf+0x216>
 b08:	2f 7e       	andi	r18, 0xEF	; 239
 b0a:	b2 2e       	mov	r11, r18
 b0c:	2a e0       	ldi	r18, 0x0A	; 10
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	25 c0       	rjmp	.+74     	; 0xb5c <vfprintf+0x260>
 b12:	f2 2f       	mov	r31, r18
 b14:	f9 7f       	andi	r31, 0xF9	; 249
 b16:	bf 2e       	mov	r11, r31
 b18:	8f 36       	cpi	r24, 0x6F	; 111
 b1a:	c1 f0       	breq	.+48     	; 0xb4c <vfprintf+0x250>
 b1c:	18 f4       	brcc	.+6      	; 0xb24 <vfprintf+0x228>
 b1e:	88 35       	cpi	r24, 0x58	; 88
 b20:	79 f0       	breq	.+30     	; 0xb40 <vfprintf+0x244>
 b22:	b4 c0       	rjmp	.+360    	; 0xc8c <vfprintf+0x390>
 b24:	80 37       	cpi	r24, 0x70	; 112
 b26:	19 f0       	breq	.+6      	; 0xb2e <vfprintf+0x232>
 b28:	88 37       	cpi	r24, 0x78	; 120
 b2a:	21 f0       	breq	.+8      	; 0xb34 <vfprintf+0x238>
 b2c:	af c0       	rjmp	.+350    	; 0xc8c <vfprintf+0x390>
 b2e:	2f 2f       	mov	r18, r31
 b30:	20 61       	ori	r18, 0x10	; 16
 b32:	b2 2e       	mov	r11, r18
 b34:	b4 fe       	sbrs	r11, 4
 b36:	0d c0       	rjmp	.+26     	; 0xb52 <vfprintf+0x256>
 b38:	8b 2d       	mov	r24, r11
 b3a:	84 60       	ori	r24, 0x04	; 4
 b3c:	b8 2e       	mov	r11, r24
 b3e:	09 c0       	rjmp	.+18     	; 0xb52 <vfprintf+0x256>
 b40:	24 ff       	sbrs	r18, 4
 b42:	0a c0       	rjmp	.+20     	; 0xb58 <vfprintf+0x25c>
 b44:	9f 2f       	mov	r25, r31
 b46:	96 60       	ori	r25, 0x06	; 6
 b48:	b9 2e       	mov	r11, r25
 b4a:	06 c0       	rjmp	.+12     	; 0xb58 <vfprintf+0x25c>
 b4c:	28 e0       	ldi	r18, 0x08	; 8
 b4e:	30 e0       	ldi	r19, 0x00	; 0
 b50:	05 c0       	rjmp	.+10     	; 0xb5c <vfprintf+0x260>
 b52:	20 e1       	ldi	r18, 0x10	; 16
 b54:	30 e0       	ldi	r19, 0x00	; 0
 b56:	02 c0       	rjmp	.+4      	; 0xb5c <vfprintf+0x260>
 b58:	20 e1       	ldi	r18, 0x10	; 16
 b5a:	32 e0       	ldi	r19, 0x02	; 2
 b5c:	f8 01       	movw	r30, r16
 b5e:	b7 fe       	sbrs	r11, 7
 b60:	07 c0       	rjmp	.+14     	; 0xb70 <vfprintf+0x274>
 b62:	60 81       	ld	r22, Z
 b64:	71 81       	ldd	r23, Z+1	; 0x01
 b66:	82 81       	ldd	r24, Z+2	; 0x02
 b68:	93 81       	ldd	r25, Z+3	; 0x03
 b6a:	0c 5f       	subi	r16, 0xFC	; 252
 b6c:	1f 4f       	sbci	r17, 0xFF	; 255
 b6e:	06 c0       	rjmp	.+12     	; 0xb7c <vfprintf+0x280>
 b70:	60 81       	ld	r22, Z
 b72:	71 81       	ldd	r23, Z+1	; 0x01
 b74:	80 e0       	ldi	r24, 0x00	; 0
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	0e 5f       	subi	r16, 0xFE	; 254
 b7a:	1f 4f       	sbci	r17, 0xFF	; 255
 b7c:	a4 01       	movw	r20, r8
 b7e:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__ultoa_invert>
 b82:	a8 2e       	mov	r10, r24
 b84:	a8 18       	sub	r10, r8
 b86:	fb 2d       	mov	r31, r11
 b88:	ff 77       	andi	r31, 0x7F	; 127
 b8a:	7f 2e       	mov	r7, r31
 b8c:	76 fe       	sbrs	r7, 6
 b8e:	0b c0       	rjmp	.+22     	; 0xba6 <vfprintf+0x2aa>
 b90:	37 2d       	mov	r19, r7
 b92:	3e 7f       	andi	r19, 0xFE	; 254
 b94:	a5 14       	cp	r10, r5
 b96:	50 f4       	brcc	.+20     	; 0xbac <vfprintf+0x2b0>
 b98:	74 fe       	sbrs	r7, 4
 b9a:	0a c0       	rjmp	.+20     	; 0xbb0 <vfprintf+0x2b4>
 b9c:	72 fc       	sbrc	r7, 2
 b9e:	08 c0       	rjmp	.+16     	; 0xbb0 <vfprintf+0x2b4>
 ba0:	37 2d       	mov	r19, r7
 ba2:	3e 7e       	andi	r19, 0xEE	; 238
 ba4:	05 c0       	rjmp	.+10     	; 0xbb0 <vfprintf+0x2b4>
 ba6:	ba 2c       	mov	r11, r10
 ba8:	37 2d       	mov	r19, r7
 baa:	03 c0       	rjmp	.+6      	; 0xbb2 <vfprintf+0x2b6>
 bac:	ba 2c       	mov	r11, r10
 bae:	01 c0       	rjmp	.+2      	; 0xbb2 <vfprintf+0x2b6>
 bb0:	b5 2c       	mov	r11, r5
 bb2:	34 ff       	sbrs	r19, 4
 bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <vfprintf+0x2d4>
 bb6:	fe 01       	movw	r30, r28
 bb8:	ea 0d       	add	r30, r10
 bba:	f1 1d       	adc	r31, r1
 bbc:	80 81       	ld	r24, Z
 bbe:	80 33       	cpi	r24, 0x30	; 48
 bc0:	11 f4       	brne	.+4      	; 0xbc6 <vfprintf+0x2ca>
 bc2:	39 7e       	andi	r19, 0xE9	; 233
 bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <vfprintf+0x2dc>
 bc6:	32 ff       	sbrs	r19, 2
 bc8:	06 c0       	rjmp	.+12     	; 0xbd6 <vfprintf+0x2da>
 bca:	b3 94       	inc	r11
 bcc:	b3 94       	inc	r11
 bce:	04 c0       	rjmp	.+8      	; 0xbd8 <vfprintf+0x2dc>
 bd0:	83 2f       	mov	r24, r19
 bd2:	86 78       	andi	r24, 0x86	; 134
 bd4:	09 f0       	breq	.+2      	; 0xbd8 <vfprintf+0x2dc>
 bd6:	b3 94       	inc	r11
 bd8:	33 fd       	sbrc	r19, 3
 bda:	13 c0       	rjmp	.+38     	; 0xc02 <vfprintf+0x306>
 bdc:	30 ff       	sbrs	r19, 0
 bde:	06 c0       	rjmp	.+12     	; 0xbec <vfprintf+0x2f0>
 be0:	5a 2c       	mov	r5, r10
 be2:	b3 14       	cp	r11, r3
 be4:	18 f4       	brcc	.+6      	; 0xbec <vfprintf+0x2f0>
 be6:	53 0c       	add	r5, r3
 be8:	5b 18       	sub	r5, r11
 bea:	b3 2c       	mov	r11, r3
 bec:	b3 14       	cp	r11, r3
 bee:	68 f4       	brcc	.+26     	; 0xc0a <vfprintf+0x30e>
 bf0:	b7 01       	movw	r22, r14
 bf2:	80 e2       	ldi	r24, 0x20	; 32
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	3c 87       	std	Y+12, r19	; 0x0c
 bf8:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 bfc:	b3 94       	inc	r11
 bfe:	3c 85       	ldd	r19, Y+12	; 0x0c
 c00:	f5 cf       	rjmp	.-22     	; 0xbec <vfprintf+0x2f0>
 c02:	b3 14       	cp	r11, r3
 c04:	10 f4       	brcc	.+4      	; 0xc0a <vfprintf+0x30e>
 c06:	3b 18       	sub	r3, r11
 c08:	01 c0       	rjmp	.+2      	; 0xc0c <vfprintf+0x310>
 c0a:	31 2c       	mov	r3, r1
 c0c:	34 ff       	sbrs	r19, 4
 c0e:	12 c0       	rjmp	.+36     	; 0xc34 <vfprintf+0x338>
 c10:	b7 01       	movw	r22, r14
 c12:	80 e3       	ldi	r24, 0x30	; 48
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	3c 87       	std	Y+12, r19	; 0x0c
 c18:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 c1c:	3c 85       	ldd	r19, Y+12	; 0x0c
 c1e:	32 ff       	sbrs	r19, 2
 c20:	17 c0       	rjmp	.+46     	; 0xc50 <vfprintf+0x354>
 c22:	31 fd       	sbrc	r19, 1
 c24:	03 c0       	rjmp	.+6      	; 0xc2c <vfprintf+0x330>
 c26:	88 e7       	ldi	r24, 0x78	; 120
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	02 c0       	rjmp	.+4      	; 0xc30 <vfprintf+0x334>
 c2c:	88 e5       	ldi	r24, 0x58	; 88
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	b7 01       	movw	r22, r14
 c32:	0c c0       	rjmp	.+24     	; 0xc4c <vfprintf+0x350>
 c34:	83 2f       	mov	r24, r19
 c36:	86 78       	andi	r24, 0x86	; 134
 c38:	59 f0       	breq	.+22     	; 0xc50 <vfprintf+0x354>
 c3a:	31 ff       	sbrs	r19, 1
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <vfprintf+0x346>
 c3e:	8b e2       	ldi	r24, 0x2B	; 43
 c40:	01 c0       	rjmp	.+2      	; 0xc44 <vfprintf+0x348>
 c42:	80 e2       	ldi	r24, 0x20	; 32
 c44:	37 fd       	sbrc	r19, 7
 c46:	8d e2       	ldi	r24, 0x2D	; 45
 c48:	b7 01       	movw	r22, r14
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 c50:	a5 14       	cp	r10, r5
 c52:	38 f4       	brcc	.+14     	; 0xc62 <vfprintf+0x366>
 c54:	b7 01       	movw	r22, r14
 c56:	80 e3       	ldi	r24, 0x30	; 48
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 c5e:	5a 94       	dec	r5
 c60:	f7 cf       	rjmp	.-18     	; 0xc50 <vfprintf+0x354>
 c62:	aa 94       	dec	r10
 c64:	f4 01       	movw	r30, r8
 c66:	ea 0d       	add	r30, r10
 c68:	f1 1d       	adc	r31, r1
 c6a:	80 81       	ld	r24, Z
 c6c:	b7 01       	movw	r22, r14
 c6e:	90 e0       	ldi	r25, 0x00	; 0
 c70:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 c74:	a1 10       	cpse	r10, r1
 c76:	f5 cf       	rjmp	.-22     	; 0xc62 <vfprintf+0x366>
 c78:	33 20       	and	r3, r3
 c7a:	09 f4       	brne	.+2      	; 0xc7e <vfprintf+0x382>
 c7c:	51 ce       	rjmp	.-862    	; 0x920 <vfprintf+0x24>
 c7e:	b7 01       	movw	r22, r14
 c80:	80 e2       	ldi	r24, 0x20	; 32
 c82:	90 e0       	ldi	r25, 0x00	; 0
 c84:	0e 94 66 06 	call	0xccc	; 0xccc <fputc>
 c88:	3a 94       	dec	r3
 c8a:	f6 cf       	rjmp	.-20     	; 0xc78 <vfprintf+0x37c>
 c8c:	f7 01       	movw	r30, r14
 c8e:	86 81       	ldd	r24, Z+6	; 0x06
 c90:	97 81       	ldd	r25, Z+7	; 0x07
 c92:	02 c0       	rjmp	.+4      	; 0xc98 <vfprintf+0x39c>
 c94:	8f ef       	ldi	r24, 0xFF	; 255
 c96:	9f ef       	ldi	r25, 0xFF	; 255
 c98:	2c 96       	adiw	r28, 0x0c	; 12
 c9a:	e2 e1       	ldi	r30, 0x12	; 18
 c9c:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__epilogue_restores__>

00000ca0 <strnlen_P>:
 ca0:	fc 01       	movw	r30, r24
 ca2:	05 90       	lpm	r0, Z+
 ca4:	61 50       	subi	r22, 0x01	; 1
 ca6:	70 40       	sbci	r23, 0x00	; 0
 ca8:	01 10       	cpse	r0, r1
 caa:	d8 f7       	brcc	.-10     	; 0xca2 <strnlen_P+0x2>
 cac:	80 95       	com	r24
 cae:	90 95       	com	r25
 cb0:	8e 0f       	add	r24, r30
 cb2:	9f 1f       	adc	r25, r31
 cb4:	08 95       	ret

00000cb6 <strnlen>:
 cb6:	fc 01       	movw	r30, r24
 cb8:	61 50       	subi	r22, 0x01	; 1
 cba:	70 40       	sbci	r23, 0x00	; 0
 cbc:	01 90       	ld	r0, Z+
 cbe:	01 10       	cpse	r0, r1
 cc0:	d8 f7       	brcc	.-10     	; 0xcb8 <strnlen+0x2>
 cc2:	80 95       	com	r24
 cc4:	90 95       	com	r25
 cc6:	8e 0f       	add	r24, r30
 cc8:	9f 1f       	adc	r25, r31
 cca:	08 95       	ret

00000ccc <fputc>:
 ccc:	0f 93       	push	r16
 cce:	1f 93       	push	r17
 cd0:	cf 93       	push	r28
 cd2:	df 93       	push	r29
 cd4:	fb 01       	movw	r30, r22
 cd6:	23 81       	ldd	r18, Z+3	; 0x03
 cd8:	21 fd       	sbrc	r18, 1
 cda:	03 c0       	rjmp	.+6      	; 0xce2 <fputc+0x16>
 cdc:	8f ef       	ldi	r24, 0xFF	; 255
 cde:	9f ef       	ldi	r25, 0xFF	; 255
 ce0:	28 c0       	rjmp	.+80     	; 0xd32 <fputc+0x66>
 ce2:	22 ff       	sbrs	r18, 2
 ce4:	16 c0       	rjmp	.+44     	; 0xd12 <fputc+0x46>
 ce6:	46 81       	ldd	r20, Z+6	; 0x06
 ce8:	57 81       	ldd	r21, Z+7	; 0x07
 cea:	24 81       	ldd	r18, Z+4	; 0x04
 cec:	35 81       	ldd	r19, Z+5	; 0x05
 cee:	42 17       	cp	r20, r18
 cf0:	53 07       	cpc	r21, r19
 cf2:	44 f4       	brge	.+16     	; 0xd04 <fputc+0x38>
 cf4:	a0 81       	ld	r26, Z
 cf6:	b1 81       	ldd	r27, Z+1	; 0x01
 cf8:	9d 01       	movw	r18, r26
 cfa:	2f 5f       	subi	r18, 0xFF	; 255
 cfc:	3f 4f       	sbci	r19, 0xFF	; 255
 cfe:	31 83       	std	Z+1, r19	; 0x01
 d00:	20 83       	st	Z, r18
 d02:	8c 93       	st	X, r24
 d04:	26 81       	ldd	r18, Z+6	; 0x06
 d06:	37 81       	ldd	r19, Z+7	; 0x07
 d08:	2f 5f       	subi	r18, 0xFF	; 255
 d0a:	3f 4f       	sbci	r19, 0xFF	; 255
 d0c:	37 83       	std	Z+7, r19	; 0x07
 d0e:	26 83       	std	Z+6, r18	; 0x06
 d10:	10 c0       	rjmp	.+32     	; 0xd32 <fputc+0x66>
 d12:	eb 01       	movw	r28, r22
 d14:	09 2f       	mov	r16, r25
 d16:	18 2f       	mov	r17, r24
 d18:	00 84       	ldd	r0, Z+8	; 0x08
 d1a:	f1 85       	ldd	r31, Z+9	; 0x09
 d1c:	e0 2d       	mov	r30, r0
 d1e:	09 95       	icall
 d20:	89 2b       	or	r24, r25
 d22:	e1 f6       	brne	.-72     	; 0xcdc <fputc+0x10>
 d24:	8e 81       	ldd	r24, Y+6	; 0x06
 d26:	9f 81       	ldd	r25, Y+7	; 0x07
 d28:	01 96       	adiw	r24, 0x01	; 1
 d2a:	9f 83       	std	Y+7, r25	; 0x07
 d2c:	8e 83       	std	Y+6, r24	; 0x06
 d2e:	81 2f       	mov	r24, r17
 d30:	90 2f       	mov	r25, r16
 d32:	df 91       	pop	r29
 d34:	cf 91       	pop	r28
 d36:	1f 91       	pop	r17
 d38:	0f 91       	pop	r16
 d3a:	08 95       	ret

00000d3c <__ultoa_invert>:
 d3c:	fa 01       	movw	r30, r20
 d3e:	aa 27       	eor	r26, r26
 d40:	28 30       	cpi	r18, 0x08	; 8
 d42:	51 f1       	breq	.+84     	; 0xd98 <__ultoa_invert+0x5c>
 d44:	20 31       	cpi	r18, 0x10	; 16
 d46:	81 f1       	breq	.+96     	; 0xda8 <__ultoa_invert+0x6c>
 d48:	e8 94       	clt
 d4a:	6f 93       	push	r22
 d4c:	6e 7f       	andi	r22, 0xFE	; 254
 d4e:	6e 5f       	subi	r22, 0xFE	; 254
 d50:	7f 4f       	sbci	r23, 0xFF	; 255
 d52:	8f 4f       	sbci	r24, 0xFF	; 255
 d54:	9f 4f       	sbci	r25, 0xFF	; 255
 d56:	af 4f       	sbci	r26, 0xFF	; 255
 d58:	b1 e0       	ldi	r27, 0x01	; 1
 d5a:	3e d0       	rcall	.+124    	; 0xdd8 <__ultoa_invert+0x9c>
 d5c:	b4 e0       	ldi	r27, 0x04	; 4
 d5e:	3c d0       	rcall	.+120    	; 0xdd8 <__ultoa_invert+0x9c>
 d60:	67 0f       	add	r22, r23
 d62:	78 1f       	adc	r23, r24
 d64:	89 1f       	adc	r24, r25
 d66:	9a 1f       	adc	r25, r26
 d68:	a1 1d       	adc	r26, r1
 d6a:	68 0f       	add	r22, r24
 d6c:	79 1f       	adc	r23, r25
 d6e:	8a 1f       	adc	r24, r26
 d70:	91 1d       	adc	r25, r1
 d72:	a1 1d       	adc	r26, r1
 d74:	6a 0f       	add	r22, r26
 d76:	71 1d       	adc	r23, r1
 d78:	81 1d       	adc	r24, r1
 d7a:	91 1d       	adc	r25, r1
 d7c:	a1 1d       	adc	r26, r1
 d7e:	20 d0       	rcall	.+64     	; 0xdc0 <__ultoa_invert+0x84>
 d80:	09 f4       	brne	.+2      	; 0xd84 <__ultoa_invert+0x48>
 d82:	68 94       	set
 d84:	3f 91       	pop	r19
 d86:	2a e0       	ldi	r18, 0x0A	; 10
 d88:	26 9f       	mul	r18, r22
 d8a:	11 24       	eor	r1, r1
 d8c:	30 19       	sub	r19, r0
 d8e:	30 5d       	subi	r19, 0xD0	; 208
 d90:	31 93       	st	Z+, r19
 d92:	de f6       	brtc	.-74     	; 0xd4a <__ultoa_invert+0xe>
 d94:	cf 01       	movw	r24, r30
 d96:	08 95       	ret
 d98:	46 2f       	mov	r20, r22
 d9a:	47 70       	andi	r20, 0x07	; 7
 d9c:	40 5d       	subi	r20, 0xD0	; 208
 d9e:	41 93       	st	Z+, r20
 da0:	b3 e0       	ldi	r27, 0x03	; 3
 da2:	0f d0       	rcall	.+30     	; 0xdc2 <__ultoa_invert+0x86>
 da4:	c9 f7       	brne	.-14     	; 0xd98 <__ultoa_invert+0x5c>
 da6:	f6 cf       	rjmp	.-20     	; 0xd94 <__ultoa_invert+0x58>
 da8:	46 2f       	mov	r20, r22
 daa:	4f 70       	andi	r20, 0x0F	; 15
 dac:	40 5d       	subi	r20, 0xD0	; 208
 dae:	4a 33       	cpi	r20, 0x3A	; 58
 db0:	18 f0       	brcs	.+6      	; 0xdb8 <__ultoa_invert+0x7c>
 db2:	49 5d       	subi	r20, 0xD9	; 217
 db4:	31 fd       	sbrc	r19, 1
 db6:	40 52       	subi	r20, 0x20	; 32
 db8:	41 93       	st	Z+, r20
 dba:	02 d0       	rcall	.+4      	; 0xdc0 <__ultoa_invert+0x84>
 dbc:	a9 f7       	brne	.-22     	; 0xda8 <__ultoa_invert+0x6c>
 dbe:	ea cf       	rjmp	.-44     	; 0xd94 <__ultoa_invert+0x58>
 dc0:	b4 e0       	ldi	r27, 0x04	; 4
 dc2:	a6 95       	lsr	r26
 dc4:	97 95       	ror	r25
 dc6:	87 95       	ror	r24
 dc8:	77 95       	ror	r23
 dca:	67 95       	ror	r22
 dcc:	ba 95       	dec	r27
 dce:	c9 f7       	brne	.-14     	; 0xdc2 <__ultoa_invert+0x86>
 dd0:	00 97       	sbiw	r24, 0x00	; 0
 dd2:	61 05       	cpc	r22, r1
 dd4:	71 05       	cpc	r23, r1
 dd6:	08 95       	ret
 dd8:	9b 01       	movw	r18, r22
 dda:	ac 01       	movw	r20, r24
 ddc:	0a 2e       	mov	r0, r26
 dde:	06 94       	lsr	r0
 de0:	57 95       	ror	r21
 de2:	47 95       	ror	r20
 de4:	37 95       	ror	r19
 de6:	27 95       	ror	r18
 de8:	ba 95       	dec	r27
 dea:	c9 f7       	brne	.-14     	; 0xdde <__ultoa_invert+0xa2>
 dec:	62 0f       	add	r22, r18
 dee:	73 1f       	adc	r23, r19
 df0:	84 1f       	adc	r24, r20
 df2:	95 1f       	adc	r25, r21
 df4:	a0 1d       	adc	r26, r0
 df6:	08 95       	ret

00000df8 <__prologue_saves__>:
 df8:	2f 92       	push	r2
 dfa:	3f 92       	push	r3
 dfc:	4f 92       	push	r4
 dfe:	5f 92       	push	r5
 e00:	6f 92       	push	r6
 e02:	7f 92       	push	r7
 e04:	8f 92       	push	r8
 e06:	9f 92       	push	r9
 e08:	af 92       	push	r10
 e0a:	bf 92       	push	r11
 e0c:	cf 92       	push	r12
 e0e:	df 92       	push	r13
 e10:	ef 92       	push	r14
 e12:	ff 92       	push	r15
 e14:	0f 93       	push	r16
 e16:	1f 93       	push	r17
 e18:	cf 93       	push	r28
 e1a:	df 93       	push	r29
 e1c:	cd b7       	in	r28, 0x3d	; 61
 e1e:	de b7       	in	r29, 0x3e	; 62
 e20:	ca 1b       	sub	r28, r26
 e22:	db 0b       	sbc	r29, r27
 e24:	0f b6       	in	r0, 0x3f	; 63
 e26:	f8 94       	cli
 e28:	de bf       	out	0x3e, r29	; 62
 e2a:	0f be       	out	0x3f, r0	; 63
 e2c:	cd bf       	out	0x3d, r28	; 61
 e2e:	09 94       	ijmp

00000e30 <__epilogue_restores__>:
 e30:	2a 88       	ldd	r2, Y+18	; 0x12
 e32:	39 88       	ldd	r3, Y+17	; 0x11
 e34:	48 88       	ldd	r4, Y+16	; 0x10
 e36:	5f 84       	ldd	r5, Y+15	; 0x0f
 e38:	6e 84       	ldd	r6, Y+14	; 0x0e
 e3a:	7d 84       	ldd	r7, Y+13	; 0x0d
 e3c:	8c 84       	ldd	r8, Y+12	; 0x0c
 e3e:	9b 84       	ldd	r9, Y+11	; 0x0b
 e40:	aa 84       	ldd	r10, Y+10	; 0x0a
 e42:	b9 84       	ldd	r11, Y+9	; 0x09
 e44:	c8 84       	ldd	r12, Y+8	; 0x08
 e46:	df 80       	ldd	r13, Y+7	; 0x07
 e48:	ee 80       	ldd	r14, Y+6	; 0x06
 e4a:	fd 80       	ldd	r15, Y+5	; 0x05
 e4c:	0c 81       	ldd	r16, Y+4	; 0x04
 e4e:	1b 81       	ldd	r17, Y+3	; 0x03
 e50:	aa 81       	ldd	r26, Y+2	; 0x02
 e52:	b9 81       	ldd	r27, Y+1	; 0x01
 e54:	ce 0f       	add	r28, r30
 e56:	d1 1d       	adc	r29, r1
 e58:	0f b6       	in	r0, 0x3f	; 63
 e5a:	f8 94       	cli
 e5c:	de bf       	out	0x3e, r29	; 62
 e5e:	0f be       	out	0x3f, r0	; 63
 e60:	cd bf       	out	0x3d, r28	; 61
 e62:	ed 01       	movw	r28, r26
 e64:	08 95       	ret

00000e66 <_exit>:
 e66:	f8 94       	cli

00000e68 <__stop_program>:
 e68:	ff cf       	rjmp	.-2      	; 0xe68 <__stop_program>
